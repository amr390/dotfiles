#!/bin/bash

DOTFILES=$HOME/Documents/dotfiles
DEV=$HOME/Documents/dev
TODAY=$(date +%Y-%m-%d)

# Safety
alias rm="rm -i"
alias mv="mv -i"
alias cp="cp -i"
set -o noclobber

# Listing, directories, and motion
alias ..='cd ..'
alias ...='cd ..;cd ..'
alias grep='grep --color=auto'
alias ll="ls -lrtF --color -h --group-directories-first"
alias la="ls -alrtF --color -h --group-directories-first"
alias lA="ls -A"
alias l="ls -CF"
alias v="nvim"
alias dir='ls --color=auto --format=vertical'
alias vdir='ls --color=auto --format=long'
#alias m='less'
#alias md='mkdir'
#alias du='du -ch --max-depth=1'
alias du='du -ch'
alias treeacl='tree -A -C -L 2'
alias gnome-open=xdg-open
alias kcs="sed -i '/\[kubernetes\]/,/disabled/s/disabled = true/disabled = false/' ~/.config/starship.toml"
alias kch="sed -i '/\[kubernetes\]/,/disabled/s/disabled = false/disabled = true/' ~/.config/starship.toml"
alias k="kubectl"

alias aptu="sudo apt update && sudo apt dist-upgrade -y && sudo apt autoremove -y"
alias aptunoff="sudo apt update && sudo apt dist-upgrade -y && sudo apt autoremove -y && sudo poweroff"
alias sb="source ~/.bashrc"
alias myip="curl http://ipecho.net/plain; echo"

alias vimclean="rm -rf /home/amr/.vimbackup/*"

alias jdk8='sdk use java 8.0.265-open'
alias jdk11='sdk use java 11.0.10-open'
alias kcas='kill $(lsof -t -i:9443)'

# vim wiki
wikii() {
	v -c ":VimwikiIndex"
}

alias gpd='cd ~/Documents/dotfiles && gl && gca "new commit" && gp'

# Git flow
alias gfs="git flow feature start $1"
alias gfp="git flow feature publish $1"
alias gff="git flow feature finish $1"

function delete-branches() {
	local branches_to_delete
	branches_to_delete=$(git branch | fzf --multi)

	if [ -n "$branches_to_delete" ]; then
		git branch --delete --force $branches_to_delete
	fi
}

if [ -f $DOTFILES/bash/private-aliases ]; then
	source $DOTFILES/bash/private-aliases
fi

if [ -f $DOTFILES/bash/aliases-manning ]; then
	source $DOTFILES/bash/aliases-manning
fi
alias vtmp='cd /home/amr/Documents/Manning/data/db_backups/tmp'
alias mdbackups='cd /home/amr/Documents/Manning/data/db_backups'

TC_HOME='/home/amr/dev/python/timecop'
alias tc3="cd $TC_HOME && source timecop-be/env/bin/activate"

VB_HOME="$DEV/python/django/vatbook"
VB_DB_HOME="/home/amr/Documents/Dropbox/Aplicaciones/sat/"
alias vb3="cd $VB_HOME && workon vb3"

#DEVELOP
alias vb-run="$VB_HOME/manage.py runserver --settings=vatbook.settings.develop"
alias vb-mm="$VB_HOME/manage.py makemigrations --settings=vatbook.settings.develop"
alias vb-m="$VB_HOME/manage.py migrate --settings=vatbook.settings.develop"
alias vb-sh="$VB_HOME/manage.py shell --settings=vatbook.settings.develop"
alias vb-reset-db='rm -f /home/amr/Documents/Dropbox/Aplicaciones/vatbook/db.sqlite3'
alias vb-dbbackup="cd $VB_DB_HOME && \
    sqlite3 db.sqlite3 .schema > schema.sql && \
    sqlite3 db.sqlite3 .dump > dump.sql && \
    grep -xv -f schema.sql dump.sql > vb.backup.$TODAY.sql && \
    rm -f schema.sql dump.sql && cd -"

#STAGING
alias vb-run-p="$VB_HOME/manage.py runserver --settings=vatbook.settings.staging"
alias vb-mm-p="$VB_HOME/manage.py makemigrations --settings=vatbook.settings.staging"
alias vb-m-p="$VB_HOME/manage.py migrate --settings=vatbook.settings.staging"
alias vb-sh-p="$VB_HOME/manage.py shell --settings=vatbook.settings.staging"

TC_HOME="$DEV/sandbox/timecop"
TC_REST="$DEV/sandbox/timecop/timecop-rest/"
TC_CLI="$DEV/sandbox/timecop/timecop-cli/"

#DEVELOP
alias tc-run="cd $TC_REST && source env/bin/activate && flask run"
alias tc-serve="cd $TC_CLI && ionic serve"

SAT_HOME="$DEV/python/django/sat8485"
SAT_DB_HOME="/home/amr/Documents/Dropbox/Aplicaciones/sat/"

alias sat="cd $SAT_HOME"
#DEVELOP
alias sat-run="$SAT_HOME/manage.py runserver --settings=sat8485.settings.develop"
alias sat-mm="$SAT_HOME/manage.py makemigrations --settings=sat8485.settings.develop"
alias sat-m="$SAT_HOME/manage.py migrate --settings=sat8485.settings.develop"
alias sat-sh="$SAT_HOME/manage.py shell --settings=sat8485.settings.develop"
alias sat-reset-db='rm -f /home/amr/Documents/Dropbox/Aplicaciones/sat/db.sqlite3'
alias sat-dbbackup="cd $SAT_DB_HOME && \
    sqlite3 db.sqlite3 .schema > schema.sql && \
    sqlite3 db.sqlite3 .dump > dump.sql && \
    grep -xv -f schema.sql dump.sql > sat.backup.$TODAY.sql && \
    rm -f schema.sql dump.sql && cd -"

#STAGING
alias sat-run-p="$SAT_HOME/manage.py runserver --settings=sat8485.settings.staging"
alias sat-mm-p="$SAT_HOME/manage.py makemigrations --settings=sat8485.settings.staging"
alias sat-m-p="$SAT_HOME/manage.py migrate --settings=sat8485.settings.staging"
alias sat-sh-p="$SAT_HOME/manage.py shell --settings=sat8485.settings.staging"

alias rabbitstop="docker ps | grep some-rabbit && docker kill some-rabbit; docker rm some-rabbit"
alias rabbitrun="rabbitstop; docker run -d \
             --hostname my-rabbit \
             --name some-rabbit \
             -p 15672:15672 \
             -p 4369:4369 \
             -p 5671:5671 \
             -p 5672:5672 \
             -p 15671:15671 \
             -p 25672:25672  \
             -v /home/amr/Documents/tmp/docker/volumes/rabbitmq:/var/lib/rabbitmq/ \
             rabbitmq:3-management"
alias mongorun="docker run -d \
             --hostname mongo  \
             --name mongo \ 
             -p 27017:27017 \
             -v /home/amr/Documents/tmp/docker/volumes/mongo:/var/lib/mongo/ \
             mongo"
alias mongostop="docker kill mongo;  docker rm mongo"
alias postgresrun="docker run -d \
             --hostname pg  \
             --name postgres \
             -p 5432:5432 \
             -v /media/amr/data/var/lib/postgres/data:/var/lib/postgresql/data \ 
             postgres"
alias postgresstop="docker kill postgres;  docker rm postgres"
alias encgroup="sudo mkdir /sys/fs/cgroup/systemd && sudo mount -t cgroup -o none,name=systemd cgroup /sys/fs/cgroup/systemd"

#alias tcc="mongo \"mongodb+srv://timecop.qlqog.mongodb.net/ioclock\" --username" $1

alias hostip="ip route show 0.0.0.0/0 | grep -Eo 'via \S+' | awk '{ print \$2 }'"
alias tomcatrun="docker run -d \
    --add-host=localhost:$(hostip) \
    --hostname tomcat \
    --name tomcat \
    -p 8080:8080 \
    -v /home/amr/tmp/tomcat8/webapps/:/usr/local/tomcat/webapps \
    -v /home/amr/tmp/tomcat8/logs/:/usr/local/tomcat/logs \
    -e JAVA_OPTS=\"$JAVA_OPTS -Dgrails.env=devlocal\" \
    tomcat:8-jre8-alpine"
alias wsdstat="watch -t -n1 'awk \"{ print \$9}\" /sys/block/sdd/stat'"
alias wmm="watch grep -e Dirty: -e Writeback: /proc/meminfo"
alias enc="gpg --output $TODAY.vg.gpg --symmetric " $1
alias dec="gpg --output v.mkv -d " $1

kill_process() {
	pids=$(ps aux | grep $1 | awk '{ print $2 }')

	for pid in "${pids[@]}"; do
		kill $pid
	done
}

reset_db() {
	sudo su postgres -c "dropdb $1; createdb $1"
}

open_tunel() {
	ssh -a -N -f -L $2:$1:$2 bastion
}

alias moNeptune="open_tunel smart-search.cluster-cttghrdpki6v.us-west-2.neptune.amazonaws.com 8182"

#sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 7FCC7D46ACCC4CF8
alias freerider="cd /opt/freerider/ && FPVFreerider.x86_64"
CHROME_SANDBOX="$DEV/manning/livebook/livebook-ui/node_modules/electron/dist/chrome-sandbox"
alias set-chrome-bin="sudo chown root:root $CHROME_SANDBOX && sudo chmod 4755 $CHROME_SANDBOX"

alias sat_reset_db='rm -f /home/amr/Documents/Dropbox/Aplicaciones/sat/db.sqlite3'

alias epubChk="java -jar /home/amr/Documents/Apps/epubcheck-4.2.6/epubcheck.jar $1"
alias activate='source venv/bin/activate'
