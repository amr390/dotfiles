import java.util.List;
//import java.util.ArrayList;
import javax.xml.stream.*;
import javax.xml.stream.events.*;
import javax.xml.bind.*;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementWrapper;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.namespace.QName;
import javax.xml.transform.stream.StreamSource;

    @XmlRootElement(name = "region")
@XmlAccessorType(XmlAccessType.FIELD)
class Region {
    Long id;
    @XmlElementWrapper(name = "cities")
        List<Long> cityId;

    public Long getId(){
        return id;
    }
    public void setId(Long id){
        this.id = id;
    }

    public List<Long> getCityId(){
        return cityId;
    }
}

@XmlRootElement(name = "regions")
@XmlAccessorType(XmlAccessType.FIELD)
class Regions{

    @XmlElement(name = "region")
        List<Region> regions;

    public void setRegion(List<Region> regions){
        this.regions = regions;
    }
    public List<Region> getRegions(){
        return this.regions;
    }
}

class RegionFilter implements StreamFilter{
    private boolean accept = true;
    public boolean accept(XMLStreamReader reader){
        if(reader.isStartElement() && "region".equals(reader.getLocalName() )){
            accept = !"1".equals(reader.getAttributeValue(null, "id"));
        }else if (reader.isEndElement()){
            boolean returnv = accept;
            accept = true;
            return returnv;
        }
        return accept;
    }

}


public class RegionHandler{


    public static void main (String[] args)throws XMLStreamException{

        try{
            XMLInputFactory xmlif = XMLInputFactory.newInstance();
            StreamSource xml = new StreamSource("regions.xml");
            XMLStreamReader xer = xmlif.createXMLStreamReader(xml);

            JAXBElement<Regions> je1 =(JAXBElement<Regions>) readFromXml(xer, Regions.class);
            //Regions regions = (Regions)je1.getValue();

            //for (Region r : regions.getRegions()){
            //System.out.println( String.format("Region id: %s, citis %s", r.getId(), r.getCityId()));
            //}
        }catch(JAXBException e){
            e.printStackTrace();
        }
    }

    private static JAXBElement<?> readFromXml(XMLStreamReader xmlr, Class<?> t)throws JAXBException, XMLStreamException{

        JAXBElement<?> je1 = null;
        //JAXBContext jc = JAXBContext.newInstance(t);
        //Unmarshaller unmarshaller = jc.createUnmarshaller();
        //je1 = unmarshaller.unmarshal(xml, t);

        int eventType = xmlr.getEventType();
        printEventType(eventType);
        while(xmlr.hasNext()) {
            eventType = xmlr.next();
            printEventType(eventType);
            printName(xmlr,eventType);
            printText(xmlr);
            if (xmlr.isStartElement()) {
                printAttributes(xmlr);
            }
            printPIData(xmlr);
            System.out.println("-----------------------------");
        }

        return je1;

    }

    public static final String getEventTypeString(int eventType) {
        switch (eventType) {
        case XMLEvent.START_ELEMENT:
            return "START_ELEMENT";

        case XMLEvent.END_ELEMENT:
            return "END_ELEMENT";

        case XMLEvent.PROCESSING_INSTRUCTION:
            return "PROCESSING_INSTRUCTION";

        case XMLEvent.CHARACTERS:
            return "CHARACTERS";

        case XMLEvent.COMMENT:
            return "COMMENT";

        case XMLEvent.START_DOCUMENT:
            return "START_DOCUMENT";

        case XMLEvent.END_DOCUMENT:
            return "END_DOCUMENT";

        case XMLEvent.ENTITY_REFERENCE:
            return "ENTITY_REFERENCE";

        case XMLEvent.ATTRIBUTE:
            return "ATTRIBUTE";

        case XMLEvent.DTD:
            return "DTD";

        case XMLEvent.CDATA:
            return "CDATA";
        }

        return "UNKNOWN_EVENT_TYPE";
    }

    private static void printEventType(int eventType) {
        System.out.print("EVENT TYPE(" + eventType + "):");
        System.out.println(getEventTypeString(eventType));
    }

    private static void printName(
            XMLStreamReader xmlr,
            int eventType) {
        if (xmlr.hasName()) {
            System.out.println("HAS NAME: " + xmlr.getLocalName());
        } else {
            System.out.println("HAS NO NAME");
        }
            }

    private static void printText(XMLStreamReader xmlr) {
        if (xmlr.hasText()) {
            System.out.println("HAS TEXT: " + xmlr.getText());
        } else {
            System.out.println("HAS NO TEXT");
        }
    }

    private static void printPIData(XMLStreamReader xmlr) {
        if (xmlr.getEventType() == XMLEvent.PROCESSING_INSTRUCTION) {
            System.out.println(" PI target = " + xmlr.getPITarget());
            System.out.println(" PI Data = " + xmlr.getPIData());
        }
    }

    private static void printAttributes(XMLStreamReader xmlr) {
        if (xmlr.getAttributeCount() > 0) {
            System.out.println("\nHAS ATTRIBUTES: ");

            int count = xmlr.getAttributeCount();

            for (int i = 0; i < count; i++) {
                QName name = xmlr.getAttributeName(i);
                String namespace = xmlr.getAttributeNamespace(i);
                String type = xmlr.getAttributeType(i);
                String prefix = xmlr.getAttributePrefix(i);
                String value = xmlr.getAttributeValue(i);

                System.out.println("ATTRIBUTE-PREFIX: " + prefix);
                System.out.println("ATTRIBUTE-NAMESP: " + namespace);
                System.out.println("ATTRIBUTE-NAME:   " + name.toString());
                System.out.println("ATTRIBUTE-VALUE:  " + value);
                System.out.println("ATTRIBUTE-TYPE:  " + type);
            }
        } else {
            System.out.println("HAS NO ATTRIBUTES");
        }
    }

}
