" Environment {

    " Basics {
        set nocompatible        " Must be first line
        set encoding=utf-8
        set fileencoding=utf-8

        if !(has('win16') || has('win32') || has('win64'))
            set shell=/bin/sh
        endif
    " }

    " Setup Bundle Support {
        " The next three lines ensure that the ~/.vim/bundle/ system works
        filetype on
        filetype off
        set rtp+=~/.vim/bundle/vundle
        call vundle#rc()
    " }

" }

" Bundles {

    " Use bundles config {
        if filereadable(expand("~/.vimrc.bundles"))
            source ~/.vimrc.bundles
        endif
    " }

" }

" General {

    set background=dark         " Assume a dark background
    set colorcolumn=80          " Sets the vertical column to warn the 80 columns being reached.
    if !has('gui')
       "set term=$TERM          " Make arrow and other keys work
    endif
    filetype plugin indent on   " Automatically detect file types.
    syntax on                   " Syntax highlighting
    set mouse=a                 " Automatically enable mouse usage
    set mousehide               " Hide the mouse cursor while typing
    scriptencoding utf-8

    if has ('x') && has ('gui') " On Linux use + register for copy-paste
        set clipboard=unnamedplus
    elseif has ('gui')          " On mac and Windows, use * register for copy-paste
        set clipboard=unnamed
    endif

    set autowrite                       " Automatically write a file when leaving a modified buffer
    set shortmess+=filmnrxoOtT          " Abbrev. of messages (avoids 'hit enter')
    set viewoptions=folds,options,cursor,unix,slash " Better Unix / Windows compatibility
    set virtualedit=onemore             " Allow for cursor beyond last character
    set history=1000                    " Store a ton of history (default is 20)
    set nospell                         " Spell checking off
    set hidden                          " Allow buffer switching without saving

    " Instead of reverting the cursor to the last position in the buffer, we
    " set it to the first line when editing a git commit message
    au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

    " Setting up the directories {
    set backup                  " Backups are nice ...
    if has('persistent_undo')
        set undofile                " So is persistent undo ...
        set undolevels=1000         " Maximum number of changes that can be undone
        set undoreload=10000        " Maximum number lines to save for undo on a buffer reload
    endif
    " }

" }

" Vim UI {

    set t_Co=256
    "color lucius                   " Load a colorscheme
    color jellybeans                " Load a colorscheme

    set tabpagemax=15               " Only show 15 tabs
    set showmode                    " Display the current mode

    set cursorline                  " Highlight current line

    highlight clear SignColumn      " SignColumn should match background for
                                    " things like vim-gitgutter

    highlight clear LineNr          " Current line number row will have same background color in relative mode.
                                    " Things like vim-gitgutter will match LineNr highlight
    "highlight clear CursorLineNr    " Remove highlight color from current line number

    if has('cmdline_info')
        set ruler                   " Show the ruler
        set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " A ruler on steroids
        set showcmd                 " Show partial commands in status line and
                                    " Selected characters/lines in visual mode
    endif

    if has('statusline')
        set laststatus=2

        " Broken down into easily includeable segments
        set statusline=%<%f\                     " Filename
        set statusline+=%w%h%m%r                 " Options
        set statusline+=%{fugitive#statusline()} " Git Hotness
        set statusline+=\ [%{&ff}/%Y]            " Filetype
        set statusline+=\ [%{getcwd()}]          " Current dir
        set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
    endif

    set backspace=indent,eol,start  " Backspace for dummies
    set linespace=0                 " No extra spaces between rows
    set nu                          " Line numbers on
    set showmatch                   " Show matching brackets/parenthesis
    set incsearch                   " Find as you type search
    set hlsearch                    " Highlight search terms
    set winminheight=0              " Windows can be 0 line high
    set ignorecase                  " Case insensitive search
    set smartcase                   " Case sensitive when uc present
    set wildmenu                    " Show list instead of just completing
    set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
    set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
    set scrolljump=5                " Lines to scroll when cursor leaves screen
    set scrolloff=3                 " Minimum lines to keep above and below cursor
    set foldenable                  " Auto fold code
    set list
    set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace
    set lazyredraw                  " Don't redraw while executing macros.

" }

" Formatting {

    set nowrap                      " Wrap long lines off
    set autoindent                  " Indent at the same level of the previous line
    set shiftwidth=4                " Use indents of 4 spaces
    set expandtab                   " Tabs are spaces, not tabs
    set tabstop=4                   " An indentation every four columns
    set softtabstop=4               " Let backspace delete indent
    set nojoinspaces                " Prevents inserting two spaces after punctuation on a join (J)
    set splitright                  " Puts new vsplit windows to the right of the current
    set splitbelow                  " Puts new split windows to the bottom of the current
    set matchpairs+=<:>             " Match, to be used with %
    set pastetoggle=<F12>           " pastetoggle (sane indentation on pastes)
    "set comments=sl:/*,mb:*,elx:*/  " auto format comment blocks
    " Remove trailing whitespaces and ^M chars
    autocmd FileType c,cpp,java,groovy,go,php,javascript,python,twig,xml,yml autocmd BufWritePre <buffer> call StripTrailingWhitespace()
    autocmd FileType go autocmd BufWritePre <buffer> Fmt
    autocmd BufNewFile,BufRead *.html.twig set filetype=html.twig
    " preceding line best in a plugin but here for now.

" }

" Key (re)Mappings {

    " The default leader is '\'. 
    let mapleader = ','

    " to move between buffers
    "map <C-J> <C-W>j<C-W>
    "map <C-K> <C-W>k<C-W>
    "map <C-L> <C-W>l<C-W>
    "map <C-H> <C-W>h<C-W>

    " to move between splitted buffers
    map <C-J> <C-W>j
    map <C-K> <C-W>k
    map <C-L> <C-W>l
    map <C-H> <C-W>h

    " Wrapped lines goes down/up to next row, rather than next line in file.
    noremap j gj
    noremap k gk

    " The following two lines conflict with moving to top and
    " bottom of the screen
    map <S-H> gT
    map <S-L> gt

    " Stupid shift key fixes
    if has("user_commands")
        command! -bang -nargs=* -complete=file E e<bang> <args>
        command! -bang -nargs=* -complete=file W w<bang> <args>
        command! -bang -nargs=* -complete=file Wq wq<bang> <args>
        command! -bang -nargs=* -complete=file WQ wq<bang> <args>
        command! -bang Wa wa<bang>
        command! -bang WA wa<bang>
        command! -bang Q q<bang>
        command! -bang QA qa<bang>
        command! -bang Qa qa<bang>
    endif

    cmap Tabe tabe

    " Yank from the cursor to the end of the line, to be consistent with C and D.
    nnoremap Y y$

    " Use leader to map global register operations to C, X, V
    map <leader>c "+y
    map <leader>x "+x
    map <leader>v "+gP

    " to redraw windows and hide search results
    nmap <silent> <leader>/ :set invhlsearch<CR>

    " in gui toggle menu tools bars
    nnoremap <C-F1> :if &go=~#'m'<Bar>set go-=m<Bar>else<Bar>set go+=m<Bar>endif<CR>
    nnoremap <C-F2> :if &go=~#'T'<Bar>set go-=T<Bar>else<Bar>set go+=T<Bar>endif<CR>
    nnoremap <C-F3> :if &go=~#'r'<Bar>set go-=r<Bar>else<Bar>set go+=r<Bar>endif<CR>

    " Find merge conflict markers
    map <leader>fc /\v^[<\|=>]{7}( .*\|$)<CR>
    " Map <Leader>ff to display all lines with keyword under cursor
    " and ask which one to jump to
    nmap <Leader>ff [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<CR>

    " Shortcuts
    " Change Working Directory to that of the current file
    cmap cwd lcd %:p:h
    cmap cd. lcd %:p:h

    " Visual shifting (does not exit Visual mode)
    vnoremap < <gv
    vnoremap > >gv

    " Allow using the repeat operator with a visual selection (!)
    " http://stackoverflow.com/a/8064607/127816
    vnoremap . :normal .<CR>


    " For when you forget to sudo.. Really Write the file.
    cmap w!! w !sudo tee % >/dev/null

    " Some helpers to edit mode
    " http://vimcasts.org/e/14
    cnoremap %% <C-R>=expand('%:h').'/'<cr>
    map <leader>ew :e %%
    map <leader>es :sp %%
    map <leader>ev :vsp %%
    map <leader>et :tabe %%

    " Adjust viewports to the same size
    map <Leader>= <C-w>=
    map <Leader>_ <C-w>_

    " Easier horizontal scrolling
    map zl zL
    map zh zH

" }

" Plugins {

    " Ctags {
        set tags=./tags;/,~/.vimtags

        " Make tags placed in .git/tags file available in all levels of a repository
        let gitroot = substitute(system('git rev-parse --show-toplevel'), '[\n\r]', '', 'g')
        if gitroot != ''
            let &tags = &tags . ',' . gitroot . '/.git/tags'
        endif
    " }

    " ctrlp {
        let g:ctrlp_working_path_mode = 'ra'
        set wildignore+=*/tmp/*,*.so,*.swp,*.zip
        nnoremap <silent> <D-t> :CtrlP<CR>
        nnoremap <silent> <D-r> :CtrlPMRU<CR>
        let g:ctrlp_custom_ignore = {
            \ 'dir':  '\.git$\|\.hg$\|\.svn$',
            \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$' }

        " On Windows use "dir" as fallback command.
        if has('win32') || has('win64')
            let g:ctrlp_user_command = {
                \ 'types': {
                    \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
                    \ 2: ['.hg', 'hg --cwd %s locate -I .'],
                \ },
                \ 'fallback': 'dir %s /-n /b /s /a-d'
            \ }
        else
            let g:ctrlp_user_command = {
                \ 'types': {
                    \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
                    \ 2: ['.hg', 'hg --cwd %s locate -I .'],
                \ },
                \ 'fallback': 'find %s -type f'
            \ }
        endif
    "}

    " Fugitive {
        nnoremap <silent> <leader>gits :Gstatus<CR>
        nnoremap <silent> <leader>gitd :Gdiff<CR>
        nnoremap <silent> <leader>gitc :Gcommit<CR>
        nnoremap <silent> <leader>gitb :Gblame<CR>
        nnoremap <silent> <leader>gitl :Glog<CR>
        nnoremap <silent> <leader>gitp :Git push<CR>
        nnoremap <silent> <leader>gitr :Gread<CR>:GitGutter<CR>
        nnoremap <silent> <leader>gitw :Gwrite<CR>:GitGutter<CR>
        nnoremap <silent> <leader>gite :Gedit<CR>
        nnoremap <silent> <leader>gitg :GitGutterToggle<CR>
    "}

    " indent_guides {
        " For some colorschemes, autocolor will not work (eg: 'desert', 'ir_black')
        autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#212121 ctermbg=3
        autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#404040 ctermbg=4
        let g:indent_guides_start_level = 2
        let g:indent_guides_guide_size = 1
        let g:indent_guides_enable_on_vim_startup = 1
    " }

    " JSON {
        nmap <leader>jt <Esc>:%!python -m json.tool<CR><Esc>:set filetype=json<CR>
    " }

    " NerdTree {
        map <C-e> :NERDTreeToggle<CR>:NERDTreeMirror<CR>
        map <leader>e :NERDTreeFind<CR>
        nmap <leader>nt :NERDTreeFind<CR>

        let NERDTreeShowBookmarks=1
        let NERDTreeIgnore=['\.pyc', '\~$', '\.swo$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr']
        let NERDTreeChDirMode=0
        let NERDTreeQuitOnOpen=1
        let NERDTreeMouseMode=2
        let NERDTreeShowHidden=0
        let NERDTreeKeepTreeInNewTab=1
        let g:nerdtree_tabs_open_on_gui_startup=0
    " }

    " Misc {
        let g:NERDShutUp=1
        let b:match_ignorecase = 1
    " }

    " OmniComplete {
        if has("autocmd") && exists("+omnifunc")
            autocmd Filetype *
                \if &omnifunc == "" |
                \setlocal omnifunc=syntaxcomplete#Complete |
                \endif
        endif

        hi Pmenu  guifg=#000000 guibg=#F8F8F8 ctermfg=black ctermbg=Lightgray
        hi PmenuSbar  guifg=#8A95A7 guibg=#F8F8F8 gui=NONE ctermfg=darkcyan ctermbg=lightgray cterm=NONE
        hi PmenuThumb  guifg=#F8F8F8 guibg=#8A95A7 gui=NONE ctermfg=lightgray ctermbg=darkcyan cterm=NONE

        " Some convenient mappings
        inoremap <expr> <Esc>      pumvisible() ? "\<C-e>" : "\<Esc>"
        inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"
        inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
        inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
        inoremap <expr> <C-d>      pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<C-d>"
        inoremap <expr> <C-u>      pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<C-u>"

        " Automatically open and close the popup menu / preview window
        au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
        set completeopt=menu,preview,longest
    " 

    " PyMode {
        let g:pymode_lint_checker = "pyflakes"
        let g:pymode_utils_whitespaces = 0
        let g:pymode_options = 0
        let python_highlight_all=1
        au BufNewFile,BufRead .py
                    \ setlocal tabstop=4
                    \ setlocal softtabstop=4
                    \ setlocal shiftwidth=4
                    \ setlocal textwidth=80
                    \ setlocal expandtab
                    \ setlocal autoindent
                    \ setlocal fileformat=unix

        " Disable if python support not present
        if !has('python')
            let g:pymode = 1
        endif
        if has('python3')
            let g:pymode_python= 'python3'
            let s:python_version = 3
            let g:jedi#force_py_version = 3
        endif
    " }

    " Syntastic { a
    " https://jaxbot.me/articles/setting-up-vim-for-react-js-jsx-02-03-2015
        let g:syntastic_javascript_checkers = ['eslint']
        let g:jsx_ext_required = 0 " Allow JSX in normal js files.  

    " }

    " TagBar {
        nnoremap <silent> <leader>tt :TagbarToggle<CR>

        " If using go please install the gotags program using the following
        " go install github.com/jstemmer/gotags
        " And make sure gotags is in your path
        let g:tagbar_type_go = {
            \ 'ctagstype' : 'go',
            \ 'kinds'     : [  'p:package', 'i:imports:1', 'c:constants', 'v:variables',
                \ 't:types',  'n:interfaces', 'w:fields', 'e:embedded', 'm:methods',
                \ 'r:constructor', 'f:functions' ],
            \ 'sro' : '.',
            \ 'kind2scope' : { 't' : 'ctype', 'n' : 'ntype' },
            \ 'scope2kind' : { 'ctype' : 't', 'ntype' : 'n' },
            \ 'ctagsbin'  : 'gotags',
            \ 'ctagsargs' : '-sort -silent'
            \ }
    "}


    " ultisnips {
    " https://code.djangoproject.com/wiki/UsingVimWithDjango
        let g:UltiSnipsExpandTrigger       = "<c-j>" " <c-j>
        let g:UltiSnipsJumpForwardTrigger  = "<c-j>"
        let g:UltiSnipsJumpBackwardTrigger = "<c-p>"
        let g:UltiSnipsListSnippets        = "<c-k>" "List possible snippets based on current file
    " }

    " UndoTree {
        nnoremap <Leader>u :UndotreeToggle<CR>
        " If undotree is opened, it is likely one wants to interact with it.
        let g:undotree_SetFocusWhenToggle=1
    " }

    " XML {
        nmap <leader>xt <Esc>:%!xmllint --format %<CR><Esc>:set filetype=xml<CR>
    " }



    " vim-airline {
        " Set configuration options for the statusline plugin vim-airline.
        " Use the powerline theme and optionally enable powerline symbols.
        " To use the symbols , , , , , , and .in the statusline
        " segments add the following to your .vimrc.before.local file:
        "   let g:airline_powerline_fonts=1
        " If the previous symbols do not render for you then install a
        " powerline enabled font.
        "let g:airline_theme = 'powerlineish'
        "if !exists('g:airline_powerline_fonts')
            "" Use the default set of separators with a few customizations
            "let g:airline_left_sep='›'  " Slightly fancier than '>'
            "let g:airline_right_sep='‹' " Slightly fancier than '<'
        "endif

        let g:airline_theme = 'jellybeans'
        let g:airline_left_sep = ''
        let g:airline_left_sep = ''
        let g:airline_right_sep = ''
        let g:airline_right_sep = ''
    " }

    " VimCompletesMe {
        autocmd FileType text,markdown let b:vcm_tab_complete = 'dict'
        
    " }

    " vim-gitgutter {
        " https://github.com/airblade/vim-gitgutter/issues/106
        let g:gitgutter_realtime = 0
    " }

    " vim-grails {
        " Rename grails Map prefix to grails
        let g:GrailsMapPrefix=',v'

        "Open file under cursor
        map <C-i> :call OpenVariableUnderCursor(expand("<cword>"))<CR>
        map <Leader>h :call FindSubClasses(expand("<cword>"))<CR>

        function! OpenVariableUnderCursor(varName)
            let filename = substitute(a:varName,'(<w+>)', 'u1', 'g')
            :call OpenFileUnderCursor(filename)
        endfunction

        function! OpenFileUnderCursor(filename)
            let ext = fnamemodify(expand("%:p"), ":t:e")
            execute ":find " . a:filename . "." . ext
        endfunction

        function! FindSubClasses(filename)
            execute ":Grep \(implements\|extends\) " . a:filename
        endfunction

        "Grails testing
        map <S-F9> <Esc>:w<CR>:call RunSingleGrailsTest()<CR>
        map <F9> <Esc>:w<CR>:call RunGrailsTestFile()<CR>
        map <D-F9> :call RunLastCommandInTerminal()<CR>
        command! TestResults :call TestResults()

        function! RunSingleGrailsTest()
            let testName = expand("%:t:r.") . "." . expand("<cword>")
            :call RunGrailsTest(testName)
        endfunction

        function! RunGrailsTestFile()
            let testName = expand("%:t:r")
            :call RunGrailsTest(testName)
        endfunction

        function! RunGrailsTest(testName)
            let path = expand("%:r")
            if path =~ "integration"
                let flag = "--integration"
            else
                let flag = "--unit"
            endif
            execute ":!grails test-app " . flag . " " . a:testName
        endfunction

        function! TestResults()
            silent execute ":!open target/test-reports/html/index.html"
        endfunction
    " }

    " Vimwiki {
        let wiki = {}
        let wiki.path = '~/Dropbox/wiki/'
        let wiki.path_html = '~/Dropbox/wiki/export/html'
        let wiki.nested_syntaxes = {'python': 'python', 'c++': 'cpp', 'java': 'java', 'groovy':'groovy', 'js':'javascript'}

        let g:vimwiki_list = [wiki] 

        au BufRead,BufNewFile *.wiki set filetype=vimwiki
        :autocmd FileType vimwiki map <leader>d :VimwikiMakeDiaryNote
        function! ToggleCalendar()
            execute ":Calendar"
            if exists("g:calendar_open")
                if g:calendar_open == 1
                    execute "q"
                    unlet g:calendar_open
                else
                    g:calendar_open = 1
                end
            else
                let g:calendar_open = 1
            end
        endfunction
        :autocmd FileType vimwiki map <leader>c :call ToggleCalendar()
    " }

    " YCM {
        "let g:ycm_collect_identifiers_from_tags_files = 1 " Let YCM read tags from Ctags file
        "let g:ycm_use_ultisnips_completer = 1 " Default 1, just ensure
        "let g:ycm_seed_identifiers_with_syntax = 1 " Completion for programming language's keyword
        "let g:ycm_complete_in_comments = 1 " Completion in comments
        "let g:ycm_complete_in_strings = 1 " Completion in string
    " }

" }

" GUI Settings {

    " GVIM- (here instead of .gvimrc)
    if has('gui_running')
        set guioptions-=T           " Remove the toolbar
        set lines=40                " 40 lines of text instead of 24
        set guifont=Dejavu\ Sans\ Mono\ 11
        "set guifont=Monaco\ Bold\ 11
        if has("gui_gtk")
            "set guifont=Monaco\ Bold\ 11,Dejavu\ Sans\ Mono\ 11,Monospace\ 11,Andale\ Mono\ Regular\ 16,Menlo\ Regular\ 15,Consolas\ Regular\ 16,Courier\ New\ Regular\ 18
            set guifont=Dejavu\ Sans\ Mono\ 11
        elseif has("gui_mac")
            set guifont=Dejavu\ Sans\ Mono\ 12,Monaco\ Bold\ 11,Dejavu\ Sans\ Mono\ 11,Monospace\ 11,Andale\ Mono\ Regular\ 16,Menlo\ Regular\ 15,Consolas\ Regular\ 16,Courier\ New\ Regular\ 18
        elseif has("gui_win32")
            set guifont=Dejavu\ Sans\ Mono\ 12,Monaco\ Bold\ 11,Dejavu\ Sans\ Mono\ 11,Monospace\ 11,Andale\ Mono\ Regular\ 16,Menlo\ Regular\ 15,Consolas\ Regular\ 16,Courier\ New\ Regular\ 18
        endif
        if has('gui_macvim')
            set transparency=5      " Make the window slightly transparent
        endif
        set guioptions-=m  "remove menu bar
        set guioptions-=T  "remove toolbar
        set guioptions-=r  "remove right-hand scroll bar
        set guioptions-=L  "remove left-hand scroll bar
        noremap <C-F1> :if &go=~#'m'<Bar>set go-=m<Bar>else<Bar>set go+=m<Bar>endif<CR>
        nnoremap <C-F2> :if &go=~#'T'<Bar>set go-=T<Bar>else<Bar>set go+=T<Bar>endif<CR>
        nnoremap <C-F3> :if &go=~#'r'<Bar>set go-=r<Bar>else<Bar>set go+=r<Bar>endif<CR> 
    else
        set t_Co=256            " Enable 256 colors to stop the CSApprox warning and make xterm vim shine
    endif
" }

" Functions {

    " UnBundle {
    function! UnBundle(arg, ...)
      let bundle = vundle#config#init_bundle(a:arg, a:000)
      call filter(g:bundles, 'v:val["name_spec"] != "' . a:arg . '"')
    endfunction

    com! -nargs=+         UnBundle
    \ call UnBundle(<args>)
    " }

    " Initialize directories {
    function! InitializeDirectories()
        let parent = $HOME
        let prefix = 'vim'
        let dir_list = {
                    \ 'backup': 'backupdir',
                    \ 'views': 'viewdir',
                    \ 'swap': 'directory' }

        if has('persistent_undo')
            let dir_list['undo'] = 'undodir'
        endif

        " To specify a different directory in which to place the vimbackup,
        " vimviews, vimundo, and vimswap files/directories, add the following to
        " your .vimrc.before.local file:
        let common_dir = parent . '/.' . prefix

        for [dirname, settingname] in items(dir_list)
            let directory = common_dir . dirname . '/'
            if exists("*mkdir")
                if !isdirectory(directory)
                    call mkdir(directory)
                endif
            endif
            if !isdirectory(directory)
                echo "Warning: Unable to create backup directory: " . directory
                echo "Try: mkdir -p " . directory
            else
                let directory = substitute(directory, " ", "\\\\ ", "g")
                exec "set " . settingname . "=" . directory
            endif
        endfor
    endfunction
    call InitializeDirectories()
    " }

    " Initialize NERDTree as needed {
    function! NERDTreeInitAsNeeded()
        redir => bufoutput
        buffers!
        redir END
        let idx = stridx(bufoutput, "NERD_tree")
        if idx > -1
            NERDTreeMirror
            NERDTreeFind
            wincmd l
        endif
    endfunction
    " }

    " Strip whitespace {
    function! StripTrailingWhitespace()
        " To disable the stripping of whitespace, add the following to your
        " .vimrc.before.local file:
        "   let g:spf13_keep_trailing_whitespace = 1
        if !exists('g:spf13_keep_trailing_whitespace')
            " Preparation: save last search, and cursor position.
            let _s=@/
            let l = line(".")
            let c = col(".")
            " do the business:
            %s/\s\+$//e
            " clean up: restore previous search history, and cursor position
            let @/=_s
            call cursor(l, c)
        endif
    endfunction
    " }

    " Shell command {
    function! s:RunShellCommand(cmdline)
        botright new

        setlocal buftype=nofile
        setlocal bufhidden=delete
        setlocal nobuflisted
        setlocal noswapfile
        setlocal nowrap
        setlocal filetype=shell
        setlocal syntax=shell

        call setline(1, a:cmdline)
        call setline(2, substitute(a:cmdline, '.', '=', 'g'))
        execute 'silent $read !' . escape(a:cmdline, '%#')
        setlocal nomodifiable
        1
    endfunction

    command! -complete=file -nargs=+ Shell call s:RunShellCommand(<q-args>)
    " e.g. Grep current file for <search_term>: Shell grep -Hn <search_term> %
    " }
    
    " Django naviation {
        " for django file naviation
        let g:last_relative_dir = ''
        nnoremap \1 :call RelatedFile ("models.py")<cr>
        nnoremap \2 :call RelatedFile ("views.py")<cr>
        nnoremap \3 :call RelatedFile ("urls.py")<cr>
        nnoremap \4 :call RelatedFile ("admin.py")<cr>
        nnoremap \5 :call RelatedFile ("tests.py")<cr>
        nnoremap \6 :call RelatedFile ( "templates/" )<cr>
        nnoremap \7 :call RelatedFile ( "templatetags/" )<cr>
        nnoremap \8 :call RelatedFile ( "management/" )<cr>
        nnoremap \0 :e settings.py<cr>
        nnoremap \9 :e urls.py<cr>

        fun! RelatedFile(file)
            #This is to check that the directory looks djangoish
            if filereadable(expand("%:h"). '/models.py') || isdirectory(expand("%:h") . "/templatetags/")
                exec "edit %:h/" . a:file
                let g:last_relative_dir = expand("%:h") . '/'
                return ''
            endif
            if g:last_relative_dir != ''
                exec "edit " . g:last_relative_dir . a:file
                return ''
            endif
            echo "Cant determine where relative file is : " . a:file
            return ''
        endfun

        fun SetAppDir()
            if filereadable(expand("%:h"). '/models.py') || isdirectory(expand("%:h") . "/templatetags/")
                let g:last_relative_dir = expand("%:h") . '/'
                return ''
            endif
        endfun
        autocmd BufEnter *.py call SetAppDir()
    "}

" }
" Py-mode Rope {
" https://github.com/python-mode/python-mode/issues/525
    let g:pymode_rope_regenerate_on_write = 0
" }

