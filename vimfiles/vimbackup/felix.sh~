#!/bin/bash

# System startup script for the Apache Felix runtime environment
#
# @author: Tom Verachtert
# @version: %VERSION%
#

OWNER="amr"

NBR_OF_SERVICES_SINGLE=600
NBR_OF_SERVICES_MASTERUI=579
NBR_OF_SERVICES_SLAVE=325

#####################
# read the Apache Felix configuration file
#####################

CURL=/usr/bin/curl
NC=/bin/nc


test_user() {

	USR=`echo $USER`
	if [ ! $USR == $OWNER ]; then
        echo "You are running as $USR user. Please switch user to $OWNER user and execute again."
        exit 123
	fi

return 0
}

read_config() {
# get the Apache Felix home location
  SCRIPT=$(readlink -f $0)
  FELIX_HOME=`dirname $SCRIPT`


# parse the config files
configfile=$FELIX_HOME/conf/system.properties
csfconfigfile=$FELIX_HOME/conf/config.ini

#remove blank lines
if [ -e $configfile ]; then
  for f in $configfile
  do
    sed '/^$/d' $f > $configfile.out
  done
else
  echo "No system.properties file found in $FELIX_HOME/conf. Please check configuration."
  echo "Exitting script..."
  exit 5
fi
if [ -e $csfconfigfile ]; then
  for f in $csfconfigfile
  do
    sed '/^$/d' $f > $csfconfigfile.out
  done
else
  echo "" >  $csfconfigfile.out
fi

#read the framework config file
#/usr/bin/awk 'NF { print $0 "\n" }' $configfile.out  2>&1 > /dev/null
while read line; do
  if [ ! ${line:0:1} == "#" ]; then
	if [ ! ${line:0:1} == "?" ]; then
		key=`echo ${line%%=*} | sed 's/\./_/g'`
    		value=`echo ${line#*=}`
		declare "param_$key=$value"
	fi
  fi
done <  $configfile.out
rm $configfile.out

#read the applications config file
#/usr/bin/awk 'NF { print $0 "\n" }' $csfconfigfile.out  2>&1 > /dev/null
while read line; do
  if [ ! ${line:0:1} == "#" ]; then
	if [ ! ${line:0:1} == "?" ]; then
		key=`echo ${line%%=*} | sed 's/\./_/g' | sed 's/-/_/g'`
    		value=`echo ${line#*=}`
		declare "param_$key=$value"
	fi
  fi
done <  $csfconfigfile.out
rm $csfconfigfile.out

#FELIX_HOME=$currentdir
FELIX_CONFIG_DIR=$FELIX_HOME/conf
TELNET_IP="127.0.0.1"
TELNET_PORT=$param_osgi_shell_telnet_port
FELIX_PROPERTIESFILE=$FELIX_CONFIG_DIR/config.ini
JVM_PROXY="-Dhttp.proxyHost=geapproxy01.vm.cipal.net -Dhttp.proxyPort=3128 -Dhttp.proxyUser=amr -Dhttp.proxyPassword=cipal123"
JVM_OPTIONS="$param_jvm_options $JVM_PROXY"
JVM_EXTRA=$param_jvm_options_extra
FELIX_CACHE_DIR=$param_org_osgi_framework_storage
START_ACTIVEMQ=$param_start_activemq
}

read_props() {
# get the Apache Felix home location
  SCRIPT=$(readlink -f $0)
  FELIX_HOME=`dirname $SCRIPT`

# parse the config files
webconfigfile=$FELIX_HOME/props/org/ops4j/pax/web.config
suiteconfigfile=$FELIX_HOME/props/suite.config

#test if propertie files exist and remove blank lines
if [ -e $webconfigfile ]; then
  for f in $webconfigfile
  do
    sed '/^$/d' $f > $webconfigfile.out
  done
else
  echo "No $webconfigfile file found. Please check configuration."
  echo "Cannot test the Apache felix framework..."
  exit 5
fi
if [ -e $suiteconfigfile ]; then
  for f in $suiteconfigfile
  do
    sed '/^$/d' $f > $suiteconfigfile.out
  done
else
  echo "" >  $suiteconfigfile.out
fi

#read the web config file
#/usr/bin/awk 'NF { print $0 "\n" }' $configfile.out  2>&1 > /dev/null
while read line; do
  if [ ! ${line:0:1} == "#" ]; then
	if [ ! ${line:0:1} == "?" ]; then
		key=`echo ${line%%=*} | sed 's/\./_/g'`
    		value=`echo ${line#*=} | sed 's/"//g'`
		declare "param_$key=$value"
	fi
  fi
done <  $webconfigfile.out
rm $webconfigfile.out

#read the applications config file
#/usr/bin/awk 'NF { print $0 "\n" }' $csfconfigfile.out  2>&1 > /dev/null
while read line; do
  if [ ! ${line:0:1} == "#" ]; then
	if [ ! ${line:0:1} == "?" ]; then
		key=`echo ${line%%=*} | sed 's/\./_/g' | sed 's/-/_/g'`
		value=`echo ${line#*=} | sed 's/"//g' | sed 's/\r//g'`
		declare "param_$key=$value"
	fi
  fi
done <  $suiteconfigfile.out
rm $suiteconfigfile.out

SUITE_URL=$param_suite_url
HOST_IP="127.0.0.1"
SUITE_PORT=$param_org_osgi_service_http_port
}

test_suite() {
	host=$1
	port=$2
	suite=$3
	
	resp=`$CURL -sL --connect-timeout 30 -m 10 -w "%{http_code}\\n" "http://$host:$port/$suite" -o /dev/null` 2>&1
	echo "$resp"
}

test_services() {
	host=$1
	port=$2
	#url="http://$host:$port/system/console/services"
	url="http://$host:$port/system/console/services/1.json"
	
	response=`$CURL -u admin:admin --connect-timeout 30 -m 5 -s $url` 2>&1
	#nbr=`echo $response | awk 'BEGIN {FS="\"status\":\"Services information: "} {print $2}' | cut -d ' ' -f1`
	nbr=`echo $response | cut -d ' ' -f 3`
	
	# if not a number value return 0 because request failed
	if ! [[ "$nbr" =~ ^[0-9]+$ ]] ; then
		nbr=0;
	fi
	
	echo "$nbr"
}


get_nbr_of_services()
{
	type_host=`ls -l $FELIX_HOME/conf/config.ini | awk '{ print $11 }'`
	
	if [[ "$type_host" == *master* ]]; then
		echo $NBR_OF_SERVICES_MASTERUI
	elif [[ "$type_host" == *single* ]]; then
		echo $NBR_OF_SERVICES_SINGLE
	elif [[ "$type_host" == *slave* ]]; then
		echo $NBR_OF_SERVICES_SLAVE
	else
		echo $NBR_OF_SERVICES_SINGLE
	fi
}

######################
# MAIN
######################

# test if we are running as felix user
test_user

case $1 in
start)
	read_config
	AMQ_ACTIVE=0
	if echo $START_ACTIVEMQ | grep -i "^true" > /dev/null ; then
		if [ -e $FELIX_HOME/oem/amq/data/activemq-*.pid ]; then
			pid=`cat $FELIX_HOME/oem/amq/data/activemq-*.pid`
			status=`ps -p $pid`
			rc=$?
			if [ $rc == '0' ]; then
				echo "Apache ActiveMQ already running"
				AMQ_ACTIVE=1
			else
				rm $FELIX_HOME/oem/amq/data/activemq-*.pid 
				AMQ_ACTIVE=0
			fi
		fi
		
		if [ $AMQ_ACTIVE -eq 0 ]; then
			echo "Launching the Apache ActiveMQ process..."
			$FELIX_HOME/oem/amq/bin/activemq start xbean:file:$FELIX_HOME/conf/activemq.xml > /dev/null 2>&1
			rc=$?
			if [ $rc == '0' ] ; then
				echo "Done."
			else
				echo "Failed to start the ActiveMQ process."
				echo "See logfile under $FELIX_HOME/oem/amq/data for more information"
				exit 2
			fi
		fi
	fi
		
	echo "Launching the Apache Felix startup process..."
	if [ ! -d $FELIX_HOME/logs ] ; then
                mkdir $FELIX_HOME/logs
        fi

	if [ -e $FELIX_HOME/felix.pid ]; then
		pid=`cat $FELIX_HOME/felix.pid`
		status=`ps -p $pid`
		rc=$?
		if [ $rc == '0' ]; then
			echo "Apache Felix already running"
			exit 1
		else
			rm $FELIX_HOME/felix.pid
		fi
	fi

	# clean up the cache
	if [ -d $FELIX_HOME/$FELIX_CACHE_DIR ] && [ ! -z "$FELIX_CACHE_DIR" ]; then
		rm -rf $FELIX_HOME/$FELIX_CACHE_DIR
	fi

	if [ -e $FELIX_PROPERTIESFILE ] ; then
		cd $FELIX_HOME/
		nohup java $JVM_OPTIONS -Dorg.osgi.service.http.port=0 -Dliquibase.should.run=false -Djava.io.tmpdir=$FELIX_HOME/$FELIX_CACHE_DIR $JVM_EXTRA -Dfelix.config.properties=file:$FELIX_PROPERTIESFILE -Dgosh.args=--noi -jar $FELIX_HOME/bin/felix.jar > $FELIX_HOME/logs/felix.log 2>&1 & 
		#java $JVM_OPTIONS $JVM_EXTRA -Dfelix.config.properties=file:$FELIX_PROPERTIESFILE -jar $FELIX_HOME/bin/felix.jar 
	else 
		cd $FELIX_HOME/
		nohup java $JVM_OPTIONS -Dorg.osgi.service.http.port=0 -Dliquibase.should.run=false -Djava.io.tmpdir=$FELIX_HOME/$FELIX_CACHE_DIR $JVM_EXTRA  -Dgosh.args=--noi -jar $FELIX_HOME/bin/felix.jar > $FELIX_HOME/logs/felix.log 2>&1 &
		echo "No Apache Felix configuration file found. Please check if file $FELIX_PROPERTIESFILE exists and is correct."
		echo "starting Apache Felix without extra configurations..."
	fi
	PID=$!
	rc=$?
	if [ $rc == 0 ]; then
		echo "The Apache Felix process ID is $PID"
		echo "Test if the CIPAL TaxKernel is ready to use with the ./felix.sh test command"
	fi
	echo $PID > $FELIX_HOME/felix.pid
;;

stop)
    read_config

	if [ -e $FELIX_HOME/felix.pid ]; then
		pid=`cat $FELIX_HOME/felix.pid`
	fi
	if [ $pid ]; then
		if [ -e $NC ]; then
			$NC $TELNET_IP $TELNET_PORT <<<"stop 0 " > /dev/null 2>&1
		else
			echo "Netcat program not found."
			echo "Verify if it is installed on the system and change the NC parameter above in this script to the correct location."
			exit 4
		fi
	else
		echo "failed to stop Apache Felix"
		echo "Apache Felix is not found"
		exit 1
	fi
	echo "waiting to stop Apache Felix" 
	
	FELIX_STOPPED=0
	# check if process is still active
	for x in {1..100}; do
		status=`ps -p $pid`
		rc=$?
		if [ $rc == '1' ]; then
			echo "Done."
			rm $FELIX_HOME/felix.pid
			FELIX_STOPPED=1
			break
		else
			printf '. %.0s' {1..$x}
			sleep 1	
		fi
	done
	
	if [ $FELIX_STOPPED == 1 ]; then
		# felix successfully stopped. Now stop the ActiveMQ 
		if echo $START_ACTIVEMQ | grep -i "^true" > /dev/null ; then
			echo "Stopping the Apache ActiveMQ process..."
			$FELIX_HOME/oem/amq/bin/activemq stop > /dev/null 2>&1
			echo "Done."
		fi
	else
		# felix failed to stop.
		kill -QUIT $pid
		echo "Stop failed. Please contact system administrator for further actions"
		exit 2
	fi
	
	exit 0
;;
restart)
	echo " restarting Apache Felix platform..."
	$0 stop
	$0 start
;;
status)
	read_config
	
	if echo $START_ACTIVEMQ | grep -i "^true" > /dev/null ; then
		if [ -e $FELIX_HOME/oem/amq/data/activemq-*.pid ]; then
			pid=`cat $FELIX_HOME/oem/amq/data/*.pid`
			status=`ps -p $pid`
			rc=$?
			if [ $rc == '0' ]; then
				echo "Apache ActiveMQ is Running. "
				echo "Process ID is $pid"
			else
				echo "Apache ActiveMQ is not running. "
			fi
		else
			echo "Apache ActiveMQ is not running. "
		fi
	fi
	
	if [ -e $FELIX_HOME/felix.pid ]; then
		read_props
		pid=`cat $FELIX_HOME/felix.pid`
		status=`ps -p $pid`
		rc=$?
		if [ $rc == '0' ]; then
			echo "Apache Felix platform is Running. "
			echo "Process ID is $pid"
			aantServices=`test_services $HOST_IP $SUITE_PORT`
			
				nbr_of_cpus=`cat /proc/cpuinfo |grep processor | grep -v "#" |wc -l`
				cpu_usage=`top -p $pid -n 1|grep $pid|awk '{ print $10 }'`
				cpu=`echo "scale=2; $cpu_usage/$nbr_of_cpus"|bc`
				mem=`awk '/Pss:/{ sum += $2 } END { print sum }' /proc/$pid/smaps`
				swap=`awk '/Swap:/{ sum += $2 } END { print sum }' /proc/$pid/smaps`
				threads=`cat /proc/$pid/stat | awk '{ print $20 }'`
				pidstart="ps -p $pid -o lstart="
				starttime=`date -d "\`$pidstart\`" +'%s'`
				now=`date -d @$starttime "+%d %B %Y %T"`
				echo "The Apache Felix is running since: $now"
        		echo "Memory usage: $(($mem/1024)) Mbyte"
        		echo "Swap Memory usage: $swap Kbyte"
				echo "CPU usage: $cpu%"
				echo "Active OSGI services: $aantServices"
		else
			echo "Apache Felix platform is not Running. "
		fi
	else  echo "Apache Felix platform is not Running. "
	fi
;;
test)
	#test the Apache felix
	if [ ! -e $CURL ]; then
		echo "Curl does not exist. Please Install curl"
		exit 12
	fi
	read_config
	
	# test the Activemq service
	if echo $START_ACTIVEMQ | grep -i "^true" > /dev/null ; then
		if [ -e $FELIX_HOME/oem/amq/data/activemq-*.pid ]; then
			pid=`cat $FELIX_HOME/oem/amq/data/activemq-*.pid`
			status=`ps -p $pid`
			rc=$?
			if [ $rc == '0' ]; then	
				if [ -e $FELIX_HOME/conf/activemq.xml ] ; then 
					PORT=`cat $FELIX_HOME/conf/activemq.xml |grep openwire | grep uri | cut -d ":" -f3 | cut -d "?" -f1`
					status=`netstat -an|grep $PORT`
					rc=$?
					if [ $rc == '0' ]; then
						echo "The Apache ActiveMQ is up and running"
					else
						echo "The Apache ActiveMQ is not running"
					fi
				else
					echo "The Apache ActiveMQ is not running"
				fi
			else 
				echo "The Apache ActiveMQ is not running "
			fi
		else  
			echo "The Apache ActiveMQ is not running"
		fi
	fi
	if [ -e $FELIX_HOME/felix.pid ]; then
		pid=`cat $FELIX_HOME/felix.pid`
		status=`ps -p $pid`
		rc=$?
		if [ $rc == '0' ]; then
			read_props
			aantServices=`test_services $HOST_IP $SUITE_PORT`
			responseCodeSuite=`test_suite $HOST_IP $SUITE_PORT $SUITE_URL`
					
			NBR_OF_SERVICES=`get_nbr_of_services`
			
			if [ "$aantServices" -ge "$NBR_OF_SERVICES" ] && [ $responseCodeSuite == "200" ]; then
				echo "Cipal TaxKernel application is ready to use"
				exit 0
			else
				echo "Cipal TaxKernel application not started completely yet"
				echo "Verify again in a few seconds"
				exit 2
			fi
		else 
			echo "Apache Felix platform is not Running. "
			exit 3
		fi
	else  
		echo "Apache Felix platform is not Running. "
		exit 4
	fi
;;

*)
	echo "usage:"
	echo "./felix.sh {start|stop|restart|status|test}"
;;

esac
exit 0
