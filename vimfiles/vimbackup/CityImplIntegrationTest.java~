/*
 * Created on 10/10/2014
 *
 */
package be.cipal.styx.address.domain.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import org.junit.runner.RunWith;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.AbstractTransactionalJUnit4SpringContextTests;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.transaction.TransactionConfiguration;
import org.springframework.transaction.annotation.Transactional;

import be.cipal.common.domain.testutils.IntegrationTest;
import be.cipal.styx.address.domain.api.AreaTypeCodesEnum;
import be.cipal.styx.address.domain.api.Attribute;
import be.cipal.styx.address.domain.api.AttributeType;
import be.cipal.styx.address.domain.api.AttributeTypeCodesEnum;
import be.cipal.styx.address.domain.api.AuditInfo;
import be.cipal.styx.address.domain.api.City;
import be.cipal.styx.address.domain.api.Multilanguage;
import be.cipal.styx.address.domain.api.MultilanguageProvider;
import be.cipal.styx.address.domain.api.PartOfCountry;
import be.cipal.styx.address.domain.api.Position;
import be.cipal.styx.address.domain.helper.TestHelper;

/**
 * Integration test class for {@link CityImpl}. It tests that the class gets
 * persisted correctly. styx-address-domain-impl
 *
 * @author dmo
 * @version 10/10/2014
 */
@RunWith(SpringJUnit4ClassRunner.class)
@Category(IntegrationTest.class)
@ContextConfiguration(locations = {
        "/META-INF/spring/domain-testutils-jpa-database-test-context.xml" })
@TransactionConfiguration
@Transactional
public class CityImplIntegrationTest extends AbstractTransactionalJUnit4SpringContextTests {

	private static final String ENGLISH_LANGUAGE_CODE = "EN";
	private static final Date START_DATE = new Date();
	private static final String CITY_NAME = "Geel";
	private static final String CRAB_CREATION_USER = "crabUser";
	private static final String FUNCTIONAL_ID = "CITY_CRAB_1";
	private static final String DUTCH_LANGUAGE_CODE = "NL";
	private static final String NIS_CODE = "12342";
	private static final String NIS_CODE_CODE = AttributeTypeCodesEnum.CITY_NISCODE.toString();
	private static final BigDecimal MINIMUM_Y1 = new BigDecimal(1);
	private static final BigDecimal MINIMUM_X1 = new BigDecimal(2);
	private static final BigDecimal MAXIMUM_Y1 = new BigDecimal(3);
	private static final BigDecimal MAXIMUM_X1 = new BigDecimal(4);
	private static final BigDecimal CENTER_Y1 = new BigDecimal(5);
	private static final BigDecimal CENTER_X1 = new BigDecimal(6);
	private static final String BELGIUM_ISO36991 = "BE";
	private Date sourceCreationDate;
	@PersistenceContext(unitName = "styx-domain")
	private EntityManager em;

	private CriteriaBuilder cb;
    private CriteriaQuery<CityImpl> cq;

    private CityImpl testCityImpl;
    private City testCity;

	/**
	 * Prepares the fixture for the full class.
	 *
	 * @throws java.lang.Exception
	 */
	@Before
	public void setUp() throws Exception {
        cb = em.getCriteriaBuilder();
        cq = cb.createQuery(CityImpl.class);
	    testCity = TestHelper.createCity();
        em.persist(testCity);

		testCityImpl = new CityImpl();
		testCityImpl.setAreaType(TestHelper.findOrCreateAreaType(em, AreaTypeCodesEnum.CITY));

		AuditInfo auditInfo = new AuditInfoImpl();
		sourceCreationDate = new SimpleDateFormat("dd/MM/yyyy").parse("08/10/2014");
		auditInfo.setCreationDateSource(sourceCreationDate);
		auditInfo.setCreationUserSource(CRAB_CREATION_USER);
		testCityImpl.setAuditInfo(auditInfo);

		testCityImpl.setFirstLanguage(TestHelper.findOrCreateLanguage(em, ENGLISH_LANGUAGE_CODE));
		testCityImpl.setFunctionalId(FUNCTIONAL_ID);
		testCityImpl.setSecondLanguage(TestHelper.findOrCreateLanguage(em, DUTCH_LANGUAGE_CODE));
		testCityImpl.setStartDate(START_DATE);

		AttributeType at = TestHelper.findOrCreateAttributeType(em, AttributeTypeCodesEnum.CITY_NISCODE, true, AttributeImplIntegrationTest.VALUE_MASK_REGEX);
		Attribute attribute = new AttributeImpl(NIS_CODE);
		attribute.setArea(testCityImpl);
		attribute.setType(at);
		testCityImpl.addAttribute(attribute);
		PartOfCountry belgianPartOfCountry = new PartOfCountryImpl();
		belgianPartOfCountry.setCountry(TestHelper.findOrCreateBelgium(em));
		belgianPartOfCountry.setCity(testCityImpl);
		testCityImpl.getCountries().add(belgianPartOfCountry);
		Position position1 = new PositionImpl();
		position1.setCenterX(CENTER_X1);
		position1.setCenterY(CENTER_Y1);
		position1.setMaximumX(MAXIMUM_X1);
		position1.setMaximumY(MAXIMUM_Y1);
		position1.setMinimumX(MINIMUM_X1);
		position1.setMinimumY(MINIMUM_Y1);
		testCityImpl.getPositions().add(position1);
		TestHelper.newMessage(testCityImpl.getNameProvider(), CITY_NAME, TestHelper.findOrCreateLanguage(em, ENGLISH_LANGUAGE_CODE));
	}


    @Test
    public void defaultTestFindNonExistingCity() {
        City city = em.find(CityImpl.class, 1L);

        assertNull(city);
    }

    @Test
    public void defaultTestFindPersistedCity(){
        City city = em.find(CityImpl.class, testCity.getObjectId());

        assertNotNull(city);
    }

    @Test
    public void defaultTestFindPersistedCityByFunctionalId(){
        Root<CityImpl> cityR = cq.from(CityImpl.class);
        cq.where(cb.equal(cityR.get("functionalId"), testCity.getFunctionalId()));
        List<CityImpl> cities = em.createQuery(cq).getResultList();

        assertNotNull(cities);
    }

    /**
     * Tests that a completely filled city object is correctly persisted with
     * all its data.
     */
    @Test
    public void testSaveFullCity_shouldPersistAllCityData() {
        try {
            em.persist(testCityImpl);
        } catch (ConstraintViolationException e) {
            for (ConstraintViolation<?> cv : e.getConstraintViolations()) {
                System.err.println("Constrinat violation: " + cv);
            }
        }
        //If session is not flushed, detaching an object causes that object not being reachable anymore by em
        City persistedCity =em.find(CityImpl.class, testCityImpl.getObjectId());
        assertEquals(testCityImpl, persistedCity);
        assertEquals(AreaTypeCodesEnum.CITY.toString(), persistedCity.getAreaType().getCode());
        final Attribute attribute = persistedCity.getAttributes().iterator().next();
        assertEquals(NIS_CODE_CODE, attribute.getType().getCode());
        assertEquals(NIS_CODE, attribute.getValue());
        final AuditInfo retrievedAuditInfo = persistedCity.getAuditInfo();
        assertEquals(sourceCreationDate, retrievedAuditInfo.getCreationDateSource());
        assertEquals(CRAB_CREATION_USER, retrievedAuditInfo.getCreationUserSource());
        assertEquals(AreaTypeCodesEnum.CITY.toString(), persistedCity.getCode());
        assertEquals(ENGLISH_LANGUAGE_CODE, persistedCity.getFirstLanguage().getIso6391());
        assertEquals(FUNCTIONAL_ID, persistedCity.getFunctionalId());
        MultilanguageProvider provider = persistedCity.getNameProvider();
        Multilanguage message = provider.getMessages().iterator().next();
        assertEquals(CITY_NAME, message.getLabel());
        assertEquals(BELGIUM_ISO36991, persistedCity.getCountries().iterator().next().getCountry().getIso31661Alpha2());
        final Position retrievedPosition = persistedCity.getPositions().iterator().next();
        assertEquals(CENTER_X1, retrievedPosition.getCenterX());
        assertEquals(CENTER_Y1, retrievedPosition.getCenterY());
        assertEquals(MAXIMUM_X1, retrievedPosition.getMaximumX());
        assertEquals(MAXIMUM_Y1, retrievedPosition.getMaximumY());
        assertEquals(MINIMUM_X1, retrievedPosition.getMinimumX());
        assertEquals(MINIMUM_Y1, retrievedPosition.getMinimumY());
        assertEquals(DUTCH_LANGUAGE_CODE, persistedCity.getSecondLanguage().getIso6391());
        assertEquals(START_DATE, persistedCity.getStartDate());
    }
}

