package be.cipal.styx.sei;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import org.apache.cxf.jaxws.JaxWsProxyFactoryBean;
import org.apache.cxf.jaxws.JaxWsServerFactoryBean;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

import be.cipal.styx.address.domain.api.City;
import be.cipal.styx.address.domain.api.Country;
import be.cipal.styx.address.domain.api.criteria.HouseNumberPositions;
import be.cipal.styx.address.domain.api.criteria.ListHouseNumberPositionsCriteria;
import be.cipal.styx.address.domain.impl.CityImpl;
import be.cipal.styx.address.domain.impl.CountryImpl;
import be.cipal.styx.address.service.api.exception.ServiceException;
import be.cipal.styx.address.service.api.housenumber.HouseNumberService;
import be.cipal.styx.housenumberpositions.HousenumberPositionProvider;
import be.cipal.styx.housenumberpositions.HousenumberPositionsRequestWS;
import be.cipal.styx.housenumberpositions.HousenumberPositionsResponseWS;
import be.cipal.styx.housenumberpositions.MetaDataType;
import be.cipal.styx.housenumberpositions.ResponseMetaDataType.Messages;
import be.cipal.styx.housenumberpositions.ResponseMetaDataType.Messages.Message;
import be.cipal.styx.housenumberpositions.request.CityType;
import be.cipal.styx.housenumberpositions.request.CountryType;
import be.cipal.styx.housenumberpositions.request.CriteriaType;
import be.cipal.styx.housenumberpositions.request.HousenumberStatusesType;
import be.cipal.styx.housenumberpositions.request.LanguageType;
import be.cipal.styx.housenumberpositions.request.PositionsType;
import be.cipal.styx.housenumberpositions.request.PositionsType.Origins;
import be.cipal.styx.housenumberpositions.request.StreetStatusesType;
import be.cipal.styx.housenumberpositions.response.HousenumberType;
import be.cipal.styx.housenumberpositions.response.PositionType;
import be.cipal.styx.housenumberpositions.response.StreetType;
import be.cipal.styx.sei.ws.api.fault.ResponseMessages;
import be.cipal.styx.sei.ws.impl.HouseNumberPositionProviderImpl;

/**
 *
 * @author amr
 *
 */
@RunWith(MockitoJUnitRunner.class)
public class HouseNumberPositionProviderTest {

    private static final String URL = "http://localhost:9000/housenumberposition";
    private static final String ERROR_STATUS = "-1";
    private static final String SUCCESS_STATUS = "1";

    HouseNumberPositionProviderImpl endpoint;
    JaxWsServerFactoryBean srvFactory;
    JaxWsProxyFactoryBean pxFactory;
    HouseNumberPositions hnp;
    @Mock
    HouseNumberService houseNumberService;

    @Before
    public void setup() {
        initSOAPServer();
        try {
            when(houseNumberService.listHouseNumberPositions(any(ListHouseNumberPositionsCriteria.class))).thenReturn(getDefaultResponse());
        } catch (ServiceException e) {
            e.printStackTrace();
        }
    }

    @After
    public void tearDown() {
        srvFactory.destroy();
    }

    /*
     * REQUEST META-INFORMATION VALIDATIONS
     */
    @Test
    public void testRequestMissingRequestId() {
        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getMetaData().setRequestId(null);
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Message statusMessage = response.getMetaData().getMessages().getMessage().iterator().next();

        assertNotNull(response);
        assertEquals(response.getMetaData().getStatusCode(), ERROR_STATUS);
        assertEquals(statusMessage.getCode(), ResponseMessages.INVALID_XML.name());
        assertEquals(statusMessage.getDescription(), ResponseMessages.INVALID_XML.getDescription());
    }

    @Test
    public void testRequestMissingCallerId() {
        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getMetaData().setCallerId(null);
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Message statusMessage = response.getMetaData().getMessages().getMessage().iterator().next();

        assertNotNull(response);
        assertEquals(response.getMetaData().getStatusCode(), ERROR_STATUS);
        assertEquals(statusMessage.getCode(), ResponseMessages.INVALID_XML.name());
        assertEquals(statusMessage.getDescription(), ResponseMessages.INVALID_XML.getDescription());
    }

    @Test
    public void testRequestMissingApplicationId() {
        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getMetaData().setApplicationId(null);
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Message statusMessage = response.getMetaData().getMessages().getMessage().iterator().next();

        assertNotNull(response);
        assertEquals(response.getMetaData().getStatusCode(), ERROR_STATUS);
        assertEquals(statusMessage.getCode(), ResponseMessages.INVALID_XML.name());
        assertEquals(statusMessage.getDescription(), ResponseMessages.INVALID_XML.getDescription());
    }

    @Test
    public void testRequestEmptyRequestId() {
        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getMetaData().setRequestId("");
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Message statusMessage = response.getMetaData().getMessages().getMessage().iterator().next();

        assertNotNull(response);
        assertEquals(response.getMetaData().getStatusCode(), ERROR_STATUS);
        assertEquals(statusMessage.getCode(), ResponseMessages.INVALID_XML.name());
        assertEquals(statusMessage.getDescription(), ResponseMessages.INVALID_XML.getDescription());
    }

    @Test
    public void testRequestEmptyCallerId() {
        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getMetaData().setCallerId("");
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Message statusMessage = response.getMetaData().getMessages().getMessage().iterator().next();

        assertNotNull(response);
        assertEquals(response.getMetaData().getStatusCode(), ERROR_STATUS);
        assertEquals(statusMessage.getCode(), ResponseMessages.INVALID_XML.name());
        assertEquals(statusMessage.getDescription(), ResponseMessages.INVALID_XML.getDescription());
    }

    @Test
    public void testRequestEmptyApplicationId() {
        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getMetaData().setApplicationId("");
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Message statusMessage = response.getMetaData().getMessages().getMessage().iterator().next();

        assertNotNull(response);
        assertEquals(response.getMetaData().getStatusCode(), ERROR_STATUS);
        assertEquals(statusMessage.getCode(), ResponseMessages.INVALID_XML.name());
        assertEquals(statusMessage.getDescription(), ResponseMessages.INVALID_XML.getDescription());
    }

    /*
     * REQUEST CRITERIA VALIDATIONS
     */
    @Test
    public void testRequestMissingCountry() {

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getSelectionCriteria().setCountry(null);
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        assertNotNull(response);
        assertNull(response.getMetaData().getMessages());
        assertEquals(response.getMetaData().getStatusCode(), SUCCESS_STATUS);

    }

    @Test
    public void testRequestCountryStyxIdAndNisCode() {

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getSelectionCriteria().getCountry().setStyxId("12345");
        request.getSelectionCriteria().getCountry().setCountryNisCode("123");
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Message statusMessage = response.getMetaData().getMessages().getMessage().iterator().next();

        assertNotNull(response);
        assertEquals(response.getMetaData().getStatusCode(), ERROR_STATUS);
        assertEquals(statusMessage.getCode(), ResponseMessages.INVALID_XML.name());
        assertEquals(statusMessage.getDescription(), ResponseMessages.INVALID_XML.getDescription());
    }

    @Test
    public void testRequestCountryStyxIdIso3361Alpha2() {

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getSelectionCriteria().getCountry().setCountryNisCode(null);
        request.getSelectionCriteria().getCountry().setStyxId("12345");
        request.getSelectionCriteria().getCountry().setIso31661Alpha2Code("BE");
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Message statusMessage = response.getMetaData().getMessages().getMessage().iterator().next();

        assertNotNull(response);
        assertEquals(response.getMetaData().getStatusCode(), ERROR_STATUS);
        assertEquals(statusMessage.getCode(), ResponseMessages.INVALID_XML.name());
        assertEquals(statusMessage.getDescription(), ResponseMessages.INVALID_XML.getDescription());

    }

    @Test
    public void testRequestCountryStyxIdAndAlpha3() {

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getSelectionCriteria().getCountry().setCountryNisCode(null);
        request.getSelectionCriteria().getCountry().setStyxId("12345");
        request.getSelectionCriteria().getCountry().setIso31661Alpha3Code("BEL");
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Message statusMessage = response.getMetaData().getMessages().getMessage().iterator().next();

        assertNotNull(response);
        assertEquals(response.getMetaData().getStatusCode(), ERROR_STATUS);
        assertEquals(statusMessage.getCode(), ResponseMessages.INVALID_XML.name());
        assertEquals(statusMessage.getDescription(), ResponseMessages.INVALID_XML.getDescription());
    }

    @Test
    public void testRequestCountryStyxIdIso3361Numeric() {

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getSelectionCriteria().getCountry().setCountryNisCode(null);
        request.getSelectionCriteria().getCountry().setStyxId("12345");
        request.getSelectionCriteria().getCountry().setIso31661NumericCode("123");
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Message statusMessage = response.getMetaData().getMessages().getMessage().iterator().next();

        assertNotNull(response);
        assertEquals(response.getMetaData().getStatusCode(), ERROR_STATUS);
        assertEquals(statusMessage.getCode(), ResponseMessages.INVALID_XML.name());
        assertEquals(statusMessage.getDescription(), ResponseMessages.INVALID_XML.getDescription());

    }

    @Test
    public void testRequestCountryNisCodeAndAlpha2() {

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getSelectionCriteria().getCountry().setCountryNisCode("123");
        request.getSelectionCriteria().getCountry().setIso31661Alpha2Code("BE");
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Message statusMessage = response.getMetaData().getMessages().getMessage().iterator().next();

        assertNotNull(response);
        assertEquals(response.getMetaData().getStatusCode(), ERROR_STATUS);
        assertEquals(statusMessage.getCode(), ResponseMessages.INVALID_XML.name());
        assertEquals(statusMessage.getDescription(), ResponseMessages.INVALID_XML.getDescription());

    }

    @Test
    public void testRequestCountryNisCodeAndAlpha3() {

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getSelectionCriteria().getCountry().setCountryNisCode("123");
        request.getSelectionCriteria().getCountry().setIso31661Alpha3Code("BEL");
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Message statusMessage = response.getMetaData().getMessages().getMessage().iterator().next();

        assertNotNull(response);
        assertEquals(response.getMetaData().getStatusCode(), ERROR_STATUS);
        assertEquals(statusMessage.getCode(), ResponseMessages.INVALID_XML.name());
        assertEquals(statusMessage.getDescription(), ResponseMessages.INVALID_XML.getDescription());
    }

    @Test
    public void testRequestCountryNisCodeIso3361Numeric() {

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getSelectionCriteria().getCountry().setCountryNisCode("123");
        request.getSelectionCriteria().getCountry().setIso31661NumericCode("123");
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Message statusMessage = response.getMetaData().getMessages().getMessage().iterator().next();

        assertNotNull(response);
        assertEquals(response.getMetaData().getStatusCode(), ERROR_STATUS);
        assertEquals(statusMessage.getCode(), ResponseMessages.INVALID_XML.name());
        assertEquals(statusMessage.getDescription(), ResponseMessages.INVALID_XML.getDescription());

    }

    @Test
    public void testRequestCountryAlpha2AndAlpha3() {

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getSelectionCriteria().getCountry().setCountryNisCode(null);
        request.getSelectionCriteria().getCountry().setIso31661Alpha2Code("BE");
        request.getSelectionCriteria().getCountry().setIso31661Alpha3Code("BEL");
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Message statusMessage = response.getMetaData().getMessages().getMessage().iterator().next();

        assertNotNull(response);
        assertEquals(response.getMetaData().getStatusCode(), ERROR_STATUS);
        assertEquals(statusMessage.getCode(), ResponseMessages.INVALID_XML.name());
        assertEquals(statusMessage.getDescription(), ResponseMessages.INVALID_XML.getDescription());
    }

    @Test
    public void testRequestCountryAlpha2Iso3361Numeric() {

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getSelectionCriteria().getCountry().setCountryNisCode(null);
        request.getSelectionCriteria().getCountry().setIso31661Alpha2Code("BE");
        request.getSelectionCriteria().getCountry().setIso31661NumericCode("123");
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Message statusMessage = response.getMetaData().getMessages().getMessage().iterator().next();

        assertNotNull(response);
        assertEquals(response.getMetaData().getStatusCode(), ERROR_STATUS);
        assertEquals(statusMessage.getCode(), ResponseMessages.INVALID_XML.name());
        assertEquals(statusMessage.getDescription(), ResponseMessages.INVALID_XML.getDescription());

    }

    @Test
    public void testRequestCountryAlpha3Iso3361Numeric() {

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getSelectionCriteria().getCountry().setCountryNisCode(null);
        request.getSelectionCriteria().getCountry().setIso31661Alpha3Code("BEL");
        request.getSelectionCriteria().getCountry().setIso31661NumericCode("123");
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Message statusMessage = response.getMetaData().getMessages().getMessage().iterator().next();

        assertNotNull(response);
        assertEquals(response.getMetaData().getStatusCode(), ERROR_STATUS);
        assertEquals(statusMessage.getCode(), ResponseMessages.INVALID_XML.name());
        assertEquals(statusMessage.getDescription(), ResponseMessages.INVALID_XML.getDescription());

    }

    @Test
    public void testRequestEmptyCountryStyxId() {

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getSelectionCriteria().getCountry().setCountryNisCode(null);
        request.getSelectionCriteria().getCountry().setStyxId("");
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Message statusMessage = response.getMetaData().getMessages().getMessage().iterator().next();

        assertNotNull(response);
        assertEquals(response.getMetaData().getStatusCode(), ERROR_STATUS);
        assertEquals(statusMessage.getCode(), ResponseMessages.INVALID_XML.name());
        assertEquals(statusMessage.getDescription(), ResponseMessages.INVALID_XML.getDescription());
    }

    @Test
    public void testRequestEmptyCountryNisCode() {

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getSelectionCriteria().getCountry().setCountryNisCode(null);
        request.getSelectionCriteria().getCountry().setCountryNisCode("");
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Message statusMessage = response.getMetaData().getMessages().getMessage().iterator().next();

        assertNotNull(response);
        assertEquals(response.getMetaData().getStatusCode(), ERROR_STATUS);
        assertEquals(statusMessage.getCode(), ResponseMessages.INVALID_XML.name());
        assertEquals(statusMessage.getDescription(), ResponseMessages.INVALID_XML.getDescription());
    }

    @Test
    public void testRequestEmptyCountryIso31661alpha2() {

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getSelectionCriteria().getCountry().setIso31661Alpha2Code("");
        request.getSelectionCriteria().getCountry().setCountryNisCode(null);
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Message statusMessage = response.getMetaData().getMessages().getMessage().iterator().next();

        assertNotNull(response);
        assertEquals(response.getMetaData().getStatusCode(), ERROR_STATUS);
        assertEquals(statusMessage.getCode(), ResponseMessages.INVALID_XML.name());
        assertEquals(statusMessage.getDescription(), ResponseMessages.INVALID_XML.getDescription());
    }

    @Test
    public void testRequestEmptyCountryIso31661alpha3() {

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getSelectionCriteria().getCountry().setCountryNisCode(null);
        request.getSelectionCriteria().getCountry().setIso31661Alpha3Code("");
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Message statusMessage = response.getMetaData().getMessages().getMessage().iterator().next();

        assertNotNull(response);
        assertEquals(response.getMetaData().getStatusCode(), ERROR_STATUS);
        assertEquals(statusMessage.getCode(), ResponseMessages.INVALID_XML.name());
        assertEquals(statusMessage.getDescription(), ResponseMessages.INVALID_XML.getDescription());
    }

    @Test
    public void testRequestEmptyCountryIso31661Num() {

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getSelectionCriteria().getCountry().setCountryNisCode(null);
        request.getSelectionCriteria().getCountry().setIso31661NumericCode("");
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Message statusMessage = response.getMetaData().getMessages().getMessage().iterator().next();

        assertNotNull(response);
        assertEquals(response.getMetaData().getStatusCode(), ERROR_STATUS);
        assertEquals(statusMessage.getCode(), ResponseMessages.INVALID_XML.name());
        assertEquals(statusMessage.getDescription(), ResponseMessages.INVALID_XML.getDescription());
    }

    @Test
    public void testRequestMissingCity() {

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getSelectionCriteria().setCity(null);
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Message statusMessage = response.getMetaData().getMessages().getMessage().iterator().next();

        assertNotNull(response);
        assertEquals(response.getMetaData().getStatusCode(), ERROR_STATUS);
        assertEquals(statusMessage.getCode(), ResponseMessages.INVALID_XML.name());
        assertEquals(statusMessage.getDescription(), ResponseMessages.INVALID_XML.getDescription());
    }

    @Test
    public void testRequestCityStyxIdAndCrabId() {

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getSelectionCriteria().getCity().setStyxId("CITY_CRAB_12345");
        request.getSelectionCriteria().getCity().setCrabId(12345L);
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Message statusMessage = response.getMetaData().getMessages().getMessage().iterator().next();

        assertNotNull(response);
        assertEquals(response.getMetaData().getStatusCode(), ERROR_STATUS);
        assertEquals(statusMessage.getCode(), ResponseMessages.INVALID_XML.name());
        assertEquals(statusMessage.getDescription(), ResponseMessages.INVALID_XML.getDescription());
    }

    @Test
    public void testRequestCityStyxIdAndNisCode() {

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getSelectionCriteria().getCity().setStyxId("CITY_CRAB_12345");
        request.getSelectionCriteria().getCity().setCityNisCode("12345");
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Message statusMessage = response.getMetaData().getMessages().getMessage().iterator().next();

        assertNotNull(response);
        assertEquals(response.getMetaData().getStatusCode(), ERROR_STATUS);
        assertEquals(statusMessage.getCode(), ResponseMessages.INVALID_XML.name());
        assertEquals(statusMessage.getDescription(), ResponseMessages.INVALID_XML.getDescription());
    }

    @Test
    public void testRequestCityNisCodeCrabId() {

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getSelectionCriteria().getCity().setCityNisCode("12345");
        request.getSelectionCriteria().getCity().setCrabId(12345L);
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Message statusMessage = response.getMetaData().getMessages().getMessage().iterator().next();

        assertNotNull(response);
        assertEquals(response.getMetaData().getStatusCode(), ERROR_STATUS);
        assertEquals(statusMessage.getCode(), ResponseMessages.INVALID_XML.name());
        assertEquals(statusMessage.getDescription(), ResponseMessages.INVALID_XML.getDescription());
    }

    public void testRequestCityEmptyStyxI() {

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getSelectionCriteria().getCity().setStyxId("");
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Message statusMessage = response.getMetaData().getMessages().getMessage().iterator().next();

        assertNotNull(response);
        assertEquals(response.getMetaData().getStatusCode(), ERROR_STATUS);
        assertEquals(statusMessage.getCode(), ResponseMessages.INVALID_XML.name());
        assertEquals(statusMessage.getDescription(), ResponseMessages.INVALID_XML.getDescription());
    }

    @Test
    public void testRequestCityEmptyCrabId() {

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getSelectionCriteria().getCity().setCrabId(-1L);
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Message statusMessage = response.getMetaData().getMessages().getMessage().iterator().next();

        assertNotNull(response);
        assertEquals(response.getMetaData().getStatusCode(), ERROR_STATUS);
        assertEquals(statusMessage.getCode(), ResponseMessages.INVALID_XML.name());
        assertEquals(statusMessage.getDescription(), ResponseMessages.INVALID_XML.getDescription());
    }

    @Test
    public void testRequestCityEmptyNisCode() {

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getSelectionCriteria().getCity().setCityNisCode("");
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Message statusMessage = response.getMetaData().getMessages().getMessage().iterator().next();

        assertNotNull(response);
        assertEquals(response.getMetaData().getStatusCode(), ERROR_STATUS);
        assertEquals(statusMessage.getCode(), ResponseMessages.INVALID_XML.name());
        assertEquals(statusMessage.getDescription(), ResponseMessages.INVALID_XML.getDescription());
    }

    @Test
    public void testRequestMissingStreet() {

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getSelectionCriteria().setStreet(null);
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        assertNotNull(response);
        assertEquals(SUCCESS_STATUS, response.getMetaData().getStatusCode());
    }

    @Test
    public void testRequestMissingStreetStatus() {

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getSelectionCriteria().getStreet().setStatuses(null);
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Message statusMessage = response.getMetaData().getMessages().getMessage().iterator().next();

        assertNotNull(response);
        assertEquals(response.getMetaData().getStatusCode(), ERROR_STATUS);
        assertEquals(statusMessage.getCode(), ResponseMessages.INVALID_XML.name());
        assertEquals(statusMessage.getDescription(), ResponseMessages.INVALID_XML.getDescription());
    }

    @Test
    public void testRequestDuplicateStreetStatus() {

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        // Duplicated status
        request.getSelectionCriteria().getStreet().getStatuses().getStatus().add("1");
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        assertNotNull(response);
        assertEquals(response.getMetaData().getStatusCode(), SUCCESS_STATUS);

    }

    @Test
    public void testRequestMissingHouseNumber() {

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getSelectionCriteria().setHousenumber(null);
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        assertNotNull(response);
        assertEquals(SUCCESS_STATUS, response.getMetaData().getStatusCode());
    }

    @Test
    public void testRequestMissingHousenumberStatus() {

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getSelectionCriteria().getHousenumber().setStatuses(null);
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Message statusMessage = response.getMetaData().getMessages().getMessage().iterator().next();

        assertNotNull(response);
        assertEquals(response.getMetaData().getStatusCode(), ERROR_STATUS);
        assertEquals(statusMessage.getCode(), ResponseMessages.INVALID_XML.name());
        assertEquals(statusMessage.getDescription(), ResponseMessages.INVALID_XML.getDescription());
    }

    @Test
    public void testRequestDuplicateHouseNumberStatus() {

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        // Duplicated status
        request.getSelectionCriteria().getHousenumber().getStatuses().getStatus().add("1");
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        assertNotNull(response);
        assertEquals(response.getMetaData().getStatusCode(), SUCCESS_STATUS);

    }

    @Test
    public void testRequestMissingPositions() {

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getSelectionCriteria().setPositions(null);
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Message statusMessage = response.getMetaData().getMessages().getMessage().iterator().next();

        assertNotNull(response);
        assertEquals(response.getMetaData().getStatusCode(), ERROR_STATUS);
        assertEquals(statusMessage.getCode(), ResponseMessages.INVALID_XML.name());
        assertEquals(statusMessage.getDescription(), ResponseMessages.INVALID_XML.getDescription());
    }

    @Test
    public void testRequestMissingPositionOrigins() {

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getSelectionCriteria().getPositions().setOrigins(null);
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        assertNotNull(response);
        assertEquals(SUCCESS_STATUS, response.getMetaData().getStatusCode());
    }

    @Test
    public void testRequestMissingPositionCoordinateSystem() {

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getSelectionCriteria().getPositions().setCoordinateSystem(null);
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Message statusMessage = response.getMetaData().getMessages().getMessage().iterator().next();

        assertNotNull(response);
        assertEquals(response.getMetaData().getStatusCode(), ERROR_STATUS);
        assertEquals(statusMessage.getCode(), ResponseMessages.INVALID_XML.name());
        assertEquals(statusMessage.getDescription(), ResponseMessages.INVALID_XML.getDescription());
    }

    @Test
    public void testRequestMissingPreferredLanguage() {

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        request.getSelectionCriteria().setLanguage(null);
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        assertNotNull(response);
    }

    @Test
    public void testRequestEmptyLanguage() {

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        LanguageType lang = new LanguageType();
        lang.setIso6391Code("");
        request.getSelectionCriteria().setLanguage(lang);
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Message statusMessage = response.getMetaData().getMessages().getMessage().iterator().next();

        assertNotNull(response);
        assertEquals(response.getMetaData().getStatusCode(), ERROR_STATUS);
        assertEquals(statusMessage.getCode(), ResponseMessages.INVALID_XML.name());
        assertEquals(statusMessage.getDescription(), ResponseMessages.INVALID_XML.getDescription());
    }

    @Test
    public void testRequestCoordinateSystemNotSupported() throws ServiceException{
        ServiceException e = new ServiceException((Object)"Other coorsys");
        when(houseNumberService.listHouseNumberPositions(
                any(ListHouseNumberPositionsCriteria.class))).thenThrow(e);
        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Messages messages = response.getMetaData().getMessages();

        assertNotNull(response);
        assertEquals(ERROR_STATUS, response.getMetaData().getStatusCode());
        assertNotNull(messages);
        assertTrue(messages.getMessage().size() > 0);
        assertEquals(messages.getMessage().iterator().next().getCode(), ResponseMessages.COORDINATE_SYSTEM_NOT_SUPPORTED.name());
    }

    @Test
    public void testResponseValidMetaData() {
        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();

        HousenumberPositionsRequestWS request = getDefRequest();
        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        assertNotNull(response);
        assertTrue(response.getMetaData().getRequestTimestamp().toGregorianCalendar().before(response.getMetaData().getResponseTimestamp().toGregorianCalendar()));
        assertNull(response.getMetaData().getMessages());
        assertNotNull(response.getMetaData().getRequestId());
        assertNotNull(response.getMetaData().getResponseId());
        assertEquals(response.getMetaData().getStatusCode(), SUCCESS_STATUS);

        assertEquals(response.getResult().getCountry().getStyxId(), hnp.getCountry().getStyxId());
        assertEquals(response.getResult().getCountry().getLabel(), hnp.getCountry().getLabel());
        assertEquals(response.getResult().getCountry().getCity().getStyxId(), hnp.getCountry().getCity().getStyxId());
        assertEquals(response.getResult().getCountry().getCity().getCrabId(), hnp.getCountry().getCity().getCrabId());
        assertEquals(response.getResult().getCountry().getCity().getLabel(), hnp.getCountry().getCity().getLabel());

        for (int idx = 0; idx < response.getResult().getCountry().getCity().getStreets().getStreet().size(); idx++) {
            StreetType st = response.getResult().getCountry().getCity().getStreets().getStreet().get(idx);
            HouseNumberPositions.Street hnpStreet = hnp.getCountry().getCity().getStreets().get(idx);
            assertEquals(st.getStyxId(), hnpStreet.getStyxId());
            assertEquals(st.getCrabId(), hnpStreet.getCrabId());
            assertEquals(st.getLabel(), hnpStreet.getLabel());
            assertEquals(st.getStatus(), hnpStreet.getStatus());
            for (int idx2 = 0; idx2 < st.getHousenumbers().getHousenumber().size(); idx2++) {
                HousenumberType hn = st.getHousenumbers().getHousenumber().get(idx2);
                HouseNumberPositions.HouseNumber hnpHouseNumber = hnp.getCountry().getCity().getStreets().get(idx).getHouseNumbers().get(idx2);
                assertEquals(hn.getStyxId(), hnpHouseNumber.getStyxId());
                assertEquals(hn.getCrabId(), hnpHouseNumber.getCrabId());
                assertEquals(hn.getStatus(), hnpHouseNumber.getStatus());
                assertEquals(hn.getHousenumber(), hnpHouseNumber.getHouseNumber());

                assertEquals(hn.getPostalCode().getCrabId(), hnpHouseNumber.getPostalCode().getCrabId());
                assertEquals(hn.getPostalCode().getStyxId(), hnpHouseNumber.getPostalCode().getStyxId());
                assertEquals(hn.getPostalCode().getPostalCode(), hnpHouseNumber.getPostalCode().getPostalCode());

                for (int idx3 = 0; idx3 < hn.getPositions().getPosition().size(); idx3++) {
                    PositionType p = hn.getPositions().getPosition().get(idx3);
                    HouseNumberPositions.Position hnpPosition = hnp.getCountry().getCity().getStreets().get(idx).getHouseNumbers().get(idx2).getPositions().get(idx3);
                    assertEquals(p.getCoordinateSystem(), hnpPosition.getCoordinateSystem());
                    assertEquals(p.getOrigin(), hnpPosition.getOrigin());
                    assertEquals(p.getWkt(), hnpPosition.getWkt());
                }
            }
        }

    }

    @Test
    public void testInvalidCountry() {

        HouseNumberPositions expectedResponse = getDefaultResponse();
        expectedResponse.setCountry(null);
        try {
            when(houseNumberService.listHouseNumberPositions(
                    any(ListHouseNumberPositionsCriteria.class))).thenReturn(expectedResponse);
        } catch (ServiceException e) {
            fail("Shouldn't throw an exception");
        }

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();
        HousenumberPositionsRequestWS request = getDefRequest();

        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Messages messages = response.getMetaData().getMessages();

        assertNotNull(response);
        assertEquals(ERROR_STATUS, response.getMetaData().getStatusCode());
        assertNotNull(messages);
        assertTrue(messages.getMessage().size() > 0);
        assertEquals(messages.getMessage().iterator().next().getCode(), ResponseMessages.INVALID_COUNTRY.name());
    }

    @Test
    public void testInvalidCity() {

        HouseNumberPositions expectedResponse = getDefaultResponse();
        expectedResponse.getCountry().setCity(null);
        try {
            when(houseNumberService.listHouseNumberPositions(any(ListHouseNumberPositionsCriteria.class))).thenReturn(expectedResponse);
        } catch (ServiceException e) {
            fail("Shouldn't throw an exception");
        }

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();
        HousenumberPositionsRequestWS request = getDefRequest();

        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Messages messages = response.getMetaData().getMessages();

        assertNotNull(response);
        assertEquals(ERROR_STATUS, response.getMetaData().getStatusCode());
        assertNotNull(messages);
        assertTrue(messages.getMessage().size() > 0);
        assertEquals(messages.getMessage().iterator().next().getCode(), ResponseMessages.INVALID_CITY.name());

    }

    @Test
    public void testInvalidLanguage() {

        HouseNumberPositions expectedResponse = getDefaultResponse();
        expectedResponse.getCountry().setCity(null);
        try {
            when(houseNumberService.listHouseNumberPositions(any(ListHouseNumberPositionsCriteria.class))).thenReturn(expectedResponse);
        } catch (ServiceException e) {
            fail("Shouldn't throw an exception");
        }

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();
        HousenumberPositionsRequestWS request = getDefRequest();
        request.getSelectionCriteria().getLanguage().setIso6391Code("OT");

        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Messages messages = response.getMetaData().getMessages();

        assertNotNull(response);
        assertEquals(ERROR_STATUS, response.getMetaData().getStatusCode());
        assertNotNull(messages);
        assertTrue(messages.getMessage().size() > 0);
        assertEquals(messages.getMessage().iterator().next().getCode(), ResponseMessages.INVALID_LANGUAGE.name());

    }

    @Test
    public void testInactiveCountry() throws ServiceException{
        Country c = new CountryImpl();
        c.setFunctionalId("COUNTRY_CRABID_150");
        c.setEndDate(new Date());
        ServiceException e = new ServiceException(c);
        when(houseNumberService.listHouseNumberPositions(any(ListHouseNumberPositionsCriteria.class))).thenThrow(e);

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();
        HousenumberPositionsRequestWS request = getDefRequest();

        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Messages messages = response.getMetaData().getMessages();

        assertNotNull(response);
        assertEquals(ERROR_STATUS, response.getMetaData().getStatusCode());
        assertNotNull(messages);
        assertTrue(messages.getMessage().size() > 0);
        assertEquals(messages.getMessage().iterator().next().getCode(), ResponseMessages.INACTIVE_COUNTRY.name());
    }

    @Test
    public void testInactiveCity() throws ServiceException{
        City c = new CityImpl();
        c.setFunctionalId("COUNTRY_CRABID_150");
        c.setEndDate(new Date());
        ServiceException e = new ServiceException(c);
        when(houseNumberService.listHouseNumberPositions(any(ListHouseNumberPositionsCriteria.class))).thenThrow(e);

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();
        HousenumberPositionsRequestWS request = getDefRequest();

        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Messages messages = response.getMetaData().getMessages();

        assertNotNull(response);
        assertEquals(ERROR_STATUS, response.getMetaData().getStatusCode());
        assertNotNull(messages);
        assertTrue(messages.getMessage().size() > 0);
        assertEquals(messages.getMessage().iterator().next().getCode(), ResponseMessages.INACTIVE_CITY.name());
    }

    @Test
    public void testStreetsNotFound() {

        HouseNumberPositions expectedResponse = getDefaultResponse();
        expectedResponse.getCountry().getCity().setStreets(null);
        try {
            when(houseNumberService.listHouseNumberPositions(any(ListHouseNumberPositionsCriteria.class))).thenReturn(expectedResponse);
        } catch (ServiceException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();
        HousenumberPositionsRequestWS request = getDefRequest();

        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Messages messages = response.getMetaData().getMessages();

        assertNotNull(response);
        assertEquals(SUCCESS_STATUS, response.getMetaData().getStatusCode());
        assertNotNull(messages);
        assertTrue(messages.getMessage().size() > 0);
        assertEquals(messages.getMessage().iterator().next().getCode(), ResponseMessages.NO_STREETS_FOUND.name());
    }

    @Test
    public void testHouseNumbersNotFound() {

        HouseNumberPositions expectedResponse = getDefaultResponse();
        Iterator<HouseNumberPositions.Street> i = expectedResponse.getCountry().getCity().getStreets().iterator();
        while (i.hasNext()) {
            i.next().setHouseNumbers(null);
        }
        try {
            when(houseNumberService.listHouseNumberPositions(any(ListHouseNumberPositionsCriteria.class))).thenReturn(expectedResponse);
        } catch (ServiceException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        HousenumberPositionProvider provider = (HousenumberPositionProvider) pxFactory.create();
        HousenumberPositionsRequestWS request = getDefRequest();

        HousenumberPositionsResponseWS response = provider.listHousenumberPositionsForCity(request);

        Messages messages = response.getMetaData().getMessages();

        assertNotNull(response);
        assertEquals(SUCCESS_STATUS, response.getMetaData().getStatusCode());
        assertNotNull(messages);
        assertTrue(messages.getMessage().size() > 0);
        assertEquals(messages.getMessage().iterator().next().getCode(), ResponseMessages.NO_HOUSENUMBER_FOUND.name());
    }

    @Test
    public void testPositionsNotFound() {

        HouseNumberPositions expectedResponse = getDefaultResponse();
        Iterator<HouseNumberPositions.Street> i = expectedResponse.getCountry().getCity().getStreets().iterator();
        while (i.hasNext()) {
            HouseNumberPositions.Street item = i.next();
            Iterator<HouseNumberPositions.HouseNumber> i2 = item.getHouseNumbers().iterator();

            while (i2.hasNext()) {
                HouseNumberPositions.HouseNumber houseNr = i2.next();
                houseNr.setPositions(null);
            }
        }
        try {
            when(houseNumberService.listHouseNumberPositions(any(ListHouseNumberPositionsCriteria.class))).thenReturn(expectedResponse);
        } catch (ServiceException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        fail("not yet implemented");
    }

    private HousenumberPositionsRequestWS getDefRequest() {
        HousenumberPositionsRequestWS request = new HousenumberPositionsRequestWS();

        request.setSelectionCriteria(getDefaultCriteria());
        request.setMetaData(getDefaultMetaData());

        return request;

    }

    private CriteriaType getDefaultCriteria() {
        CriteriaType criteria = new CriteriaType();
        CountryType country = new CountryType();
        country.setCountryNisCode("150");
        criteria.setCountry(country);

        CityType city = new CityType();
        city.setCityNisCode("71233");
        criteria.setCity(city);

        CriteriaType.Housenumber hn = new CriteriaType.Housenumber();
        HousenumberStatusesType hnSts = new HousenumberStatusesType();
        hnSts.getStatus().add("1");
        hnSts.getStatus().add("2");
        hn.setStatuses(hnSts);
        criteria.setHousenumber(hn);

        CriteriaType.Street street = new CriteriaType.Street();
        StreetStatusesType stSts = new StreetStatusesType();
        stSts.getStatus().add("1");
        stSts.getStatus().add("2");
        street.setStatuses(stSts);
        criteria.setStreet(street);

        PositionsType position = new PositionsType();
        position.setCoordinateSystem("EPSG:31370");
        Origins origins = new Origins();
        origins.getOrigin().add("1");
        origins.getOrigin().add("2");
        position.setOrigins(origins);
        criteria.setPositions(position);

        LanguageType language = new LanguageType();
        language.setIso6391Code("NL");
        criteria.setLanguage(language);

        return criteria;
    }

    private MetaDataType getDefaultMetaData() {
        MetaDataType metadata = new MetaDataType();

        metadata.setApplicationId("STYX_CLIENT_APP");
        metadata.setCallerId("STYX_CLIENT_ID");
        metadata.setRequestId("12345");

        return metadata;
    }

    private HouseNumberPositions getDefaultResponse() {
        if (null == hnp) {
            hnp = new HouseNumberPositions();
            List<HouseNumberPositions.Position> positions = new ArrayList<>();
            HouseNumberPositions.Position position = new HouseNumberPositions.Position();
            position.setCoordinateSystem("EPSG:31370");
            position.setOrigin("1");
            position.setWkt("POINT (156456.28 217704.38)");
            positions.add(position);

            HouseNumberPositions.PostalCode postalCode = new HouseNumberPositions.PostalCode();
            postalCode.setStyxId("POSTALCODE_CRAB_1");
            postalCode.setCrabId(1L);
            postalCode.setPostalCode("1A");

            List<HouseNumberPositions.HouseNumber> houseNumbers = new ArrayList<>();
            HouseNumberPositions.HouseNumber houseNumber = new HouseNumberPositions.HouseNumber();
            houseNumber.setStyxId("HOUSENUMBER_CRAB_1");
            houseNumber.setCrabId(1L);
            houseNumber.setHouseNumber("1A");
            houseNumber.setStatus("1");
            houseNumber.setPositions(positions);
            houseNumber.setPostalCode(postalCode);
            houseNumbers.add(houseNumber);

            List<HouseNumberPositions.Street> streets = new ArrayList<>();
            HouseNumberPositions.Street street = new HouseNumberPositions.Street();
            street.setStyxId("STREET_CRAB_1");
            street.setCrabId(1L);
            street.setLabel("straat naam");
            street.setStatus("1");
            street.setHouseNumbers(houseNumbers);
            streets.add(street);

            HouseNumberPositions.City city = new HouseNumberPositions.City();
            city.setStyxId("CITY_CRAB_1");
            city.setCrabId(1L);
            city.setLabel("gemeente naam");
            city.setStreets(streets);

            HouseNumberPositions.Country country = new HouseNumberPositions.Country();
            country.setLabel("Belgium");
            country.setStyxId("COUNTRY_CRAB_150");
            country.setLabel("Belgium");
            country.setNisCode("150");
            country.setCity(city);
            hnp.setCountry(country);
        }

        return hnp;
    }

    private void initSOAPServer() {
        endpoint = new HouseNumberPositionProviderImpl();
        endpoint.setHouseNumberService(houseNumberService);

        srvFactory = new JaxWsServerFactoryBean();

        srvFactory.setServiceClass(HousenumberPositionProvider.class);
        srvFactory.setAddress(URL);
        srvFactory.setServiceBean(endpoint);
        srvFactory.create();

        pxFactory = new JaxWsProxyFactoryBean();
        pxFactory.setServiceClass(HousenumberPositionProvider.class);
        pxFactory.setAddress(URL);

    }
}
