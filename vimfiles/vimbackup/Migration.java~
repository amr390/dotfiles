package be.cipal.styx.migration;

import java.beans.PropertyVetoException;
import java.net.URL;

import org.apache.log4j.Logger;
import org.apache.log4j.xml.DOMConfigurator;

import com.mchange.v2.c3p0.ComboPooledDataSource;

public class Migration {
	private static final Logger logger = Logger.getLogger("Migration");

	// TODO make this configurable?
	private URL path1 = this.getClass().getResource("/dBase/gem.dbf");
	private URL path2 = this.getClass().getResource("/dBase/gemnm.dbf");
	private URL path3 = this.getClass().getResource("/dBase/straatnm.dbf");
	private URL path4 = this.getClass().getResource("/dBase/huisnr.dbf");
	private URL path5 = this.getClass().getResource("/dBase/postkan.dbf");
	private URL path6 = this.getClass().getResource("/dBase/pkancode.dbf");
	private URL path7 = this.getClass().getResource("/dBase/terrobj.dbf");
	private URL path8 = this.getClass().getResource("/dBase/tobjhnr.dbf");

	// TODO make these configurable
	private static final String DATABASE_URI = "jdbc:oracle:thin:@GEDEVcsf-db.vm.cipal.net:1521/DEV13.cipal.be";
	private static final String DATABASE_USER = "styx_dmo";
	private static final String DATABASE_PASSWORD = "styx_dmo";

	private ComboPooledDataSource dataSource;

	public Migration() throws ClassNotFoundException, InstantiationException,
			IllegalAccessException, PropertyVetoException {
		initDataSourceC3Po();
	}
	
	public void initDataSourceC3Po() throws PropertyVetoException{
		dataSource = new ComboPooledDataSource(); 
		dataSource.setDriverClass( "oracle.jdbc.driver.OracleDriver" ); 
		dataSource.setJdbcUrl( DATABASE_URI ); 
		dataSource.setUser(DATABASE_USER); 
		dataSource.setPassword(DATABASE_PASSWORD); 
		dataSource.setMinPoolSize(5); 
		dataSource.setAcquireIncrement(5); 
		dataSource.setMaxPoolSize(15);
	}

	public void start() throws Exception {
		doGemMigration();
		doGemNmMigration();
		doStraatNmMigration();
		doHuisNrMigration();
		doPostKanMigration();
		doPKanCodeMigration();
		doTerrObjMigration();
		doTobjHnrMigration();
	}

	private void doTobjHnrMigration() throws Exception {
		TobjHnrMigration tobjHnrMigration = new TobjHnrMigration(path8, dataSource);
		long startTime = System.currentTimeMillis();
		tobjHnrMigration.migrate();
		long stopTime = System.currentTimeMillis();
		long elapsedTime = stopTime - startTime;
		logger.info("TobjHnr migration completed in  " + elapsedTime + "ms.");
	}

	private void doTerrObjMigration() throws Exception {
		TerrObjMigration terrObjMigration = new TerrObjMigration(path7, dataSource);
		long startTime = System.currentTimeMillis();
		terrObjMigration.migrate();
		long stopTime = System.currentTimeMillis();
		long elapsedTime = stopTime - startTime;
		logger.info("TerrObj migration completed in  " + elapsedTime + "ms.");
	}

	private void doPKanCodeMigration() throws Exception {
		PKanCodeMigration pKanCodeMigration = new PKanCodeMigration(path6, dataSource);
		long startTime = System.currentTimeMillis();
		pKanCodeMigration.migrate();
		long stopTime = System.currentTimeMillis();
		long elapsedTime = stopTime - startTime;
		logger.info("PKanCode migration completed in  " + elapsedTime + "ms.");
	}

	private void doPostKanMigration() throws Exception {
		PostKanMigration postKanMigration = new PostKanMigration(path5, dataSource);
		long startTime = System.currentTimeMillis();
		postKanMigration.migrate();
		long stopTime = System.currentTimeMillis();
		long elapsedTime = stopTime - startTime;
		logger.info("PostKan migration completed in  " + elapsedTime + "ms.");
	}

	private void doHuisNrMigration() throws Exception {
		HuisNrMigration huisNrMigration = new HuisNrMigration(path4, dataSource);
		long startTime = System.currentTimeMillis();
		huisNrMigration.migrate();
		long stopTime = System.currentTimeMillis();
		long elapsedTime = stopTime - startTime;
		logger.info("HuisNr migration completed in  " + elapsedTime + "ms.");
	}

	private void doStraatNmMigration() throws Exception {
		StraatNmMigration straatNmMigration = new StraatNmMigration(path3, dataSource);
		long startTime = System.currentTimeMillis();
		straatNmMigration.migrate();
		long stopTime = System.currentTimeMillis();
		long elapsedTime = stopTime - startTime;
		logger.info("StraatNm migration completed in  " + elapsedTime + "ms.");
	}

	private void doGemNmMigration() throws Exception {
		GemNmMigration gemNmMigration = new GemNmMigration(path2, dataSource);
		long startTime = System.currentTimeMillis();
		gemNmMigration.migrate();
		long stopTime = System.currentTimeMillis();
		long elapsedTime = stopTime - startTime;
		logger.info("GemNm migration completed in  " + elapsedTime + "ms.");
	}

	private void doGemMigration() throws Exception {
		GemMigration gemMigration = new GemMigration(path1, dataSource);
		long startTime = System.currentTimeMillis();
		gemMigration.migrate();
		long stopTime = System.currentTimeMillis();
		long elapsedTime = stopTime - startTime;
		logger.info("Gem migration completed in  " + elapsedTime + "ms.");
	}

	public static void main(String args[]) throws Exception {

		DOMConfigurator.configure(Migration.class.getClassLoader().getResource(
				"log4j.xml"));

		long startTime = System.currentTimeMillis();

		Migration migration = new Migration();

		migration.start();

		long stopTime = System.currentTimeMillis();
		long elapsedTime = stopTime - startTime;
		logger.info("Total migration completed in  " + elapsedTime + "ms.");
	}
}
