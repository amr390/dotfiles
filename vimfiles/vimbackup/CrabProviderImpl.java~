/*
 * Created on 12/09/2014
 */
package be.cipal.styx.crab.ws.impl;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.util.StringUtils;

import be.agiv.ws.crabws.AdrespositieItem;
import be.agiv.ws.crabws.AdrespositieObject;
import be.agiv.ws.crabws.ArrayOfAdrespositieItem;
import be.agiv.ws.crabws.ArrayOfGemeenteItem;
import be.agiv.ws.crabws.ArrayOfStraatnaamItem;
import be.agiv.ws.crabws.GemeenteItem;
import be.agiv.ws.crabws.GemeenteObject;
import be.agiv.ws.crabws.GewestItem;
import be.agiv.ws.crabws.HuisnummerWithStatusItem;
import be.agiv.ws.crabws.IWsCrab;
import be.agiv.ws.crabws.PostkantonObject;
import be.agiv.ws.crabws.StraatnaamItem;
import be.cipal.csf.common.ws.fault.WebServiceFault;
import be.cipal.styx.address.domain.api.City;
import be.cipal.styx.address.domain.api.HouseNumber;
import be.cipal.styx.address.domain.api.Position;
import be.cipal.styx.address.domain.api.PostalCode;
import be.cipal.styx.address.domain.api.Street;
import be.cipal.styx.crab.ws.api.CrabToStyxHouseNumberParserException;
import be.cipal.styx.crab.ws.impl.parser.CrabToStyxCityParser;
import be.cipal.styx.crab.ws.impl.parser.CrabToStyxHouseNumberParser;
import be.cipal.styx.crab.ws.impl.parser.CrabToStyxPositionParser;
import be.cipal.styx.crab.ws.impl.parser.CrabToStyxPostalCodeParser;
import be.cipal.styx.crab.ws.impl.parser.CrabToStyxStreetParser;
import be.cipal.styx.feed.api.Feed;
import be.cipal.styx.feed.api.FeedException;

/**
 * styx-crab-ws Implementation for the {@link CrabProvider}. It provides
 * geographical entities returned by the Crab service.
 *
 * @author david
 * @version 15/09/2014
 */
public class CrabProviderImpl implements Feed {

	private static final Integer SORT_FIELD = 1;

	private static final Integer LIST_STREETS_SORT_FIELD = null;

	private final Logger logger = Logger.getLogger(this.getClass());

	private IWsCrab crabService;

	private CrabToStyxCityParser cityParser;
	private CrabToStyxStreetParser streetParser;
	private CrabToStyxHouseNumberParser houseNumberParser;
	private CrabToStyxPostalCodeParser postalCodeParser;
	private CrabToStyxPositionParser positionParser;

	@Override
	public Collection<City> fetchCityCollection(final Map<String, Object> parameters) throws FeedException {
		@SuppressWarnings("unchecked")
		List<Integer> cityCrabIdList = null != parameters ? (List<Integer>) parameters.get(FILTERS_PARAMETER) : null;
		Collection<City> cityList = new ArrayList<>();
		if (logger.isDebugEnabled()) {
			logger.debug("========================================");
			logger.debug(" Fetching city collection for CRAB Feed");
			logger.debug("========================================");
		}
		if (null != cityCrabIdList && !cityCrabIdList.isEmpty()) {
			if (logger.isDebugEnabled()) {
				logger.debug(String.format("Going through a list of %d cities %s", cityList.size(), cityList));
			}
			for (Integer id : cityCrabIdList) {
				cityList.add(getCityByCrabId(id));
			}
		} else {
			try {
				if (logger.isDebugEnabled()) {
					logger.debug("Full load process", cityList);
				}

				cityList.addAll(listAllCities());
			} catch (WebServiceFault wsFault) {
				logger.error("Failed to access Crab Ws to retrieve city list", wsFault);
				throw new FeedException(wsFault);
			}
		}
		return cityList;
	}

	@Override
	public Collection<Street> fetchStreetCollection(final City city) throws FeedException {
		final String fnalIdFieldSeparator = "_";
		final String cityFunctionalId = city.getFunctionalId();

		if (logger.isDebugEnabled()) {
			logger.debug("==========================================");
			logger.debug(" Fetching Street collection for CRAB Feed");
			logger.debug(" City: " + city.getFunctionalId());
			logger.debug("==========================================");
		}

		if (cityFunctionalId == null) {
			throw new FeedException("The functional id for the city " + city + " is null.");
		}

		try {
			/*
			 * The crab ID is extracted from the functional id, which is a
			 * concatenation of AREATYPE, CRAB and CRABID, separated by _
			 */
			String[] fnalIdSplitted = cityFunctionalId.split(fnalIdFieldSeparator);
			final Integer crabId = Integer.valueOf(fnalIdSplitted[2]);
			return this.listStreetsByCityId(crabId, city, LIST_STREETS_SORT_FIELD);
		} catch (WebServiceFault | NumberFormatException e) {
			throw new FeedException(e);
		}
	}

	@Override
	public Collection<HouseNumber> fetchHouseNumberCollection(final Street street) throws FeedException {
		try {
			if (logger.isDebugEnabled()) {
				logger.debug("===============================================");
				logger.debug(" Fetching HouseNumber collection for CRAB Feed");
				logger.debug(" Street: " + street.getFunctionalId());
				logger.debug("===============================================");
			}
			return listHouseNumbersByStreetId(street, SORT_FIELD);
		} catch (final WebServiceFault e) {
			logger.error("There was an error getting house numbers for street " + street.getFunctionalId(), e);
			throw new FeedException(e);
		}
	}

	@Override
	public Collection<PostalCode> fetchPostalCodeCollection(final HouseNumber houseNumber) throws FeedException {
		int houseNumberId = -1;
		String stringId = houseNumber.getFunctionalId().split("_")[2];
		try {
			if (logger.isDebugEnabled()) {
				logger.debug("===============================================");
				logger.debug(" Fetching PostalCode collection for CRAB Feed");
				logger.debug(" HouseNumber: " + houseNumber.getFunctionalId());
				logger.debug("===============================================");
			}
			houseNumberId = Integer.parseInt(stringId);
			PostkantonObject crabPostalCode = crabService.getPostkantonByHuisnummerId(houseNumberId);
			PostalCode pc = postalCodeParser.parsePostalCode(crabPostalCode, houseNumber);

			return Collections.singleton(pc);
		} catch (NumberFormatException e) {
			String msg = String.format("cannot cast %s into an integer", stringId);
			logger.error(msg);
			throw new FeedException(msg, e);
		}


	}

	@Override
	public Collection<Position> fetchPositionsForHouseNumber(final HouseNumber houseNumber) throws FeedException {
		int houseNumberId = -1;
		String stringId = houseNumber.getFunctionalId().split("_")[2];
		List<Position> positionList = new ArrayList<>();

		try {
			if (logger.isDebugEnabled()) {
				logger.debug("=============================================");
				logger.debug(" Fetching Positions collection for CRAB Feed");
				logger.debug(" HouseNumber: " + houseNumber.getFunctionalId());
				logger.debug("=============================================");
			}
			houseNumberId = Integer.parseInt(stringId);
			ArrayOfAdrespositieItem crabPositionList = crabService.listAdrespositiesByHuisnummerId(houseNumberId,
					SORT_FIELD);
			for (AdrespositieItem item : crabPositionList.getAdrespositieItem()) {
				AdrespositieObject detail = crabService.getAdrespositieByAdrespositieId(item.getAdrespositieId());
				Position position = positionParser.parsePosition(detail, houseNumber);

				positionList.add(position);
			}
		} catch (NumberFormatException e) {
			logger.error(String.format("cannot cast %s into an integer", stringId));
			throw new FeedException(String.format("Cannot cast %s into an integer", stringId), e);
		}

		return positionList;

	}

	public List<HouseNumber> listHouseNumbersByStreetId(final Street street, final Integer sortField)
			throws WebServiceFault {
		final List<HouseNumber> houseNumberList = new ArrayList<>();

		/* Gets the CRAB id from the city */
		final char functionalIdFieldSeparator = '_';
		final String cityFunctionalId = street.getFunctionalId();
		final int streetId = Integer.parseInt(cityFunctionalId.substring(cityFunctionalId
				.lastIndexOf(functionalIdFieldSeparator) + 1));

		logger.info("Parsing retrieved house numbers into house number list");
		for (final HuisnummerWithStatusItem item : crabService.listHuisnummersWithStatusByStraatnaamId(streetId,
				SORT_FIELD).getHuisnummerWithStatusItem()) {
			try {
				houseNumberList.add(houseNumberParser.parseHouseNumber(street, item,
						crabService.getHuisnummerWithStatusByHuisnummerId(item.getHuisnummerId())));
			} catch (final CrabToStyxHouseNumberParserException e) {
				logger.error("Error while parsing the house number " + item.getHuisnummer() + " for the street "
						+ streetId, e);
			}
		}

		return houseNumberList;
	}

	@Override
	public Map<String, Object> wrapParameters(Map<String, Object> parameters) {
		List<String> cityIdentifiers = (List<String>)parameters.get(FILTERS_PARAMETER);

		Map<String, Object> crabFilters = new HashMap<>();
		List<String> errors = null;

		if (logger.isDebugEnabled()){
			logger.debug("===================================================");
			logger.debug(String.format("Wrapping filters from loader: city identifiers[%s]", cityIdentifiers));
			logger.debug("===================================================");
		}

		if (null != cityIdentifiers && !cityIdentifiers.isEmpty()) {
			List<Integer> cityIdList = new ArrayList<>();
			for (String idStr : cityIdentifiers) {
				try {
					if (logger.isDebugEnabled()){
						logger.debug(String.format("Selecting %s as city crab identifier", idStr));
					}
					idStr = StringUtils.trimWhitespace(idStr);
					Integer id = Integer.parseInt(idStr);
					cityIdList.add(id);
				} catch (NumberFormatException e) {
					String msg = String.format(
							"Wrap parameters failed. Cannot parse crabId [%s] into an integer value", idStr);
					logger.error(msg);

					// Initializes errors list if it wasn't previously
					// initialized.
					if (null == errors) {
						errors = new ArrayList<>();
					}
					errors.add(msg);
				}
			}
			if (null != errors && !errors.isEmpty()) {
				crabFilters.put(ERRORS_PARAMETER, errors);
			}
			crabFilters.put(FILTERS_PARAMETER, cityIdList);
		}
		if (logger.isDebugEnabled()){
			logger.debug("===================================================");
			logger.debug(String.format("Crab parameter filter wrapping complete [%s]", crabFilters));
			logger.debug("===================================================");
		}
		return crabFilters;
	}

	private List<GewestItem> listRegions(final Integer listRegionsSortField) {
		return crabService.listGewesten(listRegionsSortField).getGewestItem();
	}

	private List<City> listAllCities() throws WebServiceFault {
		List<GewestItem> regionItems = listRegions(SORT_FIELD);
		List<City> cityList = new ArrayList<>();
		for (GewestItem region : regionItems) {
			cityList.addAll(listCitiesByRegion(region.getGewestId(), SORT_FIELD));
		}

		return cityList;
	}

	private List<City> listCitiesByRegion(final int regionId, final Integer sortField) throws WebServiceFault {
		ArrayOfGemeenteItem cityItems = crabService.listGemeentenByGewestId(regionId, sortField);
		String methodMsg = "[listInMapGemeentenByGewestId] ";
		List<City> cityList = new ArrayList<>();

		logger.info(String.format("%s Parsing retrived cities into a City list", methodMsg));

		for (GemeenteItem item : cityItems.getGemeenteItem()) {
			cityList.add(getCityByCrabId(item.getGemeenteId()));
		}

		return cityList;
	}

	private City getCityByCrabId(int crabId) {
		City city = null;
		try {
			GemeenteObject crabCity = crabService.getGemeenteByGemeenteId(crabId);
			if (null == crabCity) {
				throw new RuntimeException();
			}
			city = this.cityParser.parseCity(crabCity);
		} catch (RuntimeException e) {
			logger.error("Error while parsing city with crabId: " + crabId, e);
		}

		return city;
	}

	private List<Street> listStreetsByCityId(final int cityId, final City city, final Integer sortField)
			throws WebServiceFault {
		ArrayOfStraatnaamItem straatnaamItems = crabService.listStraatnamenByGemeenteId(cityId, sortField);
		String methodMsg = "[listStraatnaamByGemeenteId] ";
		List<Street> streetList = new ArrayList<>();

		logger.info(String.format("%s parsing retrieved cities into city list", methodMsg));
		for (StraatnaamItem item : straatnaamItems.getStraatnaamItem()) {
			try {
				Street street = this.streetParser.parseStreet(city, item,
						crabService.getStraatnaamWithStatusByStraatnaamId(item.getStraatnaamId()));
				streetList.add(street);
			} catch (RuntimeException e) {
				logger.error("Error while parsing the street " + item.getStraatnaam(), e);
			}
		}

		return streetList;
	}

	/**
	 * Returns the Crab service interface.
	 *
	 * @return the Crab service interface
	 */
	public IWsCrab getCrabService() {
		return crabService;
	}

	/**
	 * Sets the Crab service interface.
	 *
	 * @param crabService
	 *            Crab service interface
	 */
	public void setCrabService(final IWsCrab crabService) {
		this.crabService = crabService;
	}

	/**
	 * SEts the city parser
	 *
	 * @param cityParser
	 */
	public void setCityParser(final CrabToStyxCityParser cityParser) {
		this.cityParser = cityParser;
	}

	/**
	 * Sets the street parser
	 *
	 * @param streetParser
	 */
	public void setStreetParser(final CrabToStyxStreetParser streetParser) {
		this.streetParser = streetParser;
	}

	/**
	 * Sets the house number parser.
	 *
	 * @param houseNumberParser
	 *            the houseNumberParser to set
	 */
	public void setHouseNumberParser(final CrabToStyxHouseNumberParser houseNumberParser) {
		this.houseNumberParser = houseNumberParser;
	}

	/**
	 * Sets the postal code parser.
	 *
	 * @param postalCodeParser
	 *            the PostalCodeparser to set
	 */
	public void setPostalCodeParser(final CrabToStyxPostalCodeParser postalCodeParser) {
		this.postalCodeParser = postalCodeParser;
	}

	/**
	 * @param positionParser
	 *            the positionParser to set
	 */
	public void setPositionParser(final CrabToStyxPositionParser positionParser) {
		this.positionParser = positionParser;
	}

}
